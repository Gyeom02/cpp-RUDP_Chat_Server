// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_DISCONNECT;
struct C_DISCONNECTDefaultTypeInternal;
extern C_DISCONNECTDefaultTypeInternal _C_DISCONNECT_default_instance_;
class C_FINDACCOUNT;
struct C_FINDACCOUNTDefaultTypeInternal;
extern C_FINDACCOUNTDefaultTypeInternal _C_FINDACCOUNT_default_instance_;
class C_GETCHATLOG;
struct C_GETCHATLOGDefaultTypeInternal;
extern C_GETCHATLOGDefaultTypeInternal _C_GETCHATLOG_default_instance_;
class C_GETFRIENDREQUEST;
struct C_GETFRIENDREQUESTDefaultTypeInternal;
extern C_GETFRIENDREQUESTDefaultTypeInternal _C_GETFRIENDREQUEST_default_instance_;
class C_GETFRIENDS;
struct C_GETFRIENDSDefaultTypeInternal;
extern C_GETFRIENDSDefaultTypeInternal _C_GETFRIENDS_default_instance_;
class C_KEYREADY;
struct C_KEYREADYDefaultTypeInternal;
extern C_KEYREADYDefaultTypeInternal _C_KEYREADY_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MAKEACCOUNT;
struct C_MAKEACCOUNTDefaultTypeInternal;
extern C_MAKEACCOUNTDefaultTypeInternal _C_MAKEACCOUNT_default_instance_;
class C_REQUESTFRIEND;
struct C_REQUESTFRIENDDefaultTypeInternal;
extern C_REQUESTFRIENDDefaultTypeInternal _C_REQUESTFRIEND_default_instance_;
class C_REQUESTRESPONSE;
struct C_REQUESTRESPONSEDefaultTypeInternal;
extern C_REQUESTRESPONSEDefaultTypeInternal _C_REQUESTRESPONSE_default_instance_;
class C_RUDPACK;
struct C_RUDPACKDefaultTypeInternal;
extern C_RUDPACKDefaultTypeInternal _C_RUDPACK_default_instance_;
class C_SENDMSG;
struct C_SENDMSGDefaultTypeInternal;
extern C_SENDMSGDefaultTypeInternal _C_SENDMSG_default_instance_;
class C_SHAREPUBLICKEY;
struct C_SHAREPUBLICKEYDefaultTypeInternal;
extern C_SHAREPUBLICKEYDefaultTypeInternal _C_SHAREPUBLICKEY_default_instance_;
class S_DISCONNECT;
struct S_DISCONNECTDefaultTypeInternal;
extern S_DISCONNECTDefaultTypeInternal _S_DISCONNECT_default_instance_;
class S_FINDACCOUNT;
struct S_FINDACCOUNTDefaultTypeInternal;
extern S_FINDACCOUNTDefaultTypeInternal _S_FINDACCOUNT_default_instance_;
class S_GETCHATLOG;
struct S_GETCHATLOGDefaultTypeInternal;
extern S_GETCHATLOGDefaultTypeInternal _S_GETCHATLOG_default_instance_;
class S_GETFRIENDREQUEST;
struct S_GETFRIENDREQUESTDefaultTypeInternal;
extern S_GETFRIENDREQUESTDefaultTypeInternal _S_GETFRIENDREQUEST_default_instance_;
class S_GETFRIENDS;
struct S_GETFRIENDSDefaultTypeInternal;
extern S_GETFRIENDSDefaultTypeInternal _S_GETFRIENDS_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MAKEACCOUNT;
struct S_MAKEACCOUNTDefaultTypeInternal;
extern S_MAKEACCOUNTDefaultTypeInternal _S_MAKEACCOUNT_default_instance_;
class S_REQUESTFRIEND;
struct S_REQUESTFRIENDDefaultTypeInternal;
extern S_REQUESTFRIENDDefaultTypeInternal _S_REQUESTFRIEND_default_instance_;
class S_REQUESTRESPONSE;
struct S_REQUESTRESPONSEDefaultTypeInternal;
extern S_REQUESTRESPONSEDefaultTypeInternal _S_REQUESTRESPONSE_default_instance_;
class S_RUDPACK;
struct S_RUDPACKDefaultTypeInternal;
extern S_RUDPACKDefaultTypeInternal _S_RUDPACK_default_instance_;
class S_SENDMSG;
struct S_SENDMSGDefaultTypeInternal;
extern S_SENDMSGDefaultTypeInternal _S_SENDMSG_default_instance_;
class S_SHAREPUBLICKEY;
struct S_SHAREPUBLICKEYDefaultTypeInternal;
extern S_SHAREPUBLICKEYDefaultTypeInternal _S_SHAREPUBLICKEY_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_DISCONNECT* Arena::CreateMaybeMessage<::Protocol::C_DISCONNECT>(Arena*);
template<> ::Protocol::C_FINDACCOUNT* Arena::CreateMaybeMessage<::Protocol::C_FINDACCOUNT>(Arena*);
template<> ::Protocol::C_GETCHATLOG* Arena::CreateMaybeMessage<::Protocol::C_GETCHATLOG>(Arena*);
template<> ::Protocol::C_GETFRIENDREQUEST* Arena::CreateMaybeMessage<::Protocol::C_GETFRIENDREQUEST>(Arena*);
template<> ::Protocol::C_GETFRIENDS* Arena::CreateMaybeMessage<::Protocol::C_GETFRIENDS>(Arena*);
template<> ::Protocol::C_KEYREADY* Arena::CreateMaybeMessage<::Protocol::C_KEYREADY>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MAKEACCOUNT* Arena::CreateMaybeMessage<::Protocol::C_MAKEACCOUNT>(Arena*);
template<> ::Protocol::C_REQUESTFRIEND* Arena::CreateMaybeMessage<::Protocol::C_REQUESTFRIEND>(Arena*);
template<> ::Protocol::C_REQUESTRESPONSE* Arena::CreateMaybeMessage<::Protocol::C_REQUESTRESPONSE>(Arena*);
template<> ::Protocol::C_RUDPACK* Arena::CreateMaybeMessage<::Protocol::C_RUDPACK>(Arena*);
template<> ::Protocol::C_SENDMSG* Arena::CreateMaybeMessage<::Protocol::C_SENDMSG>(Arena*);
template<> ::Protocol::C_SHAREPUBLICKEY* Arena::CreateMaybeMessage<::Protocol::C_SHAREPUBLICKEY>(Arena*);
template<> ::Protocol::S_DISCONNECT* Arena::CreateMaybeMessage<::Protocol::S_DISCONNECT>(Arena*);
template<> ::Protocol::S_FINDACCOUNT* Arena::CreateMaybeMessage<::Protocol::S_FINDACCOUNT>(Arena*);
template<> ::Protocol::S_GETCHATLOG* Arena::CreateMaybeMessage<::Protocol::S_GETCHATLOG>(Arena*);
template<> ::Protocol::S_GETFRIENDREQUEST* Arena::CreateMaybeMessage<::Protocol::S_GETFRIENDREQUEST>(Arena*);
template<> ::Protocol::S_GETFRIENDS* Arena::CreateMaybeMessage<::Protocol::S_GETFRIENDS>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MAKEACCOUNT* Arena::CreateMaybeMessage<::Protocol::S_MAKEACCOUNT>(Arena*);
template<> ::Protocol::S_REQUESTFRIEND* Arena::CreateMaybeMessage<::Protocol::S_REQUESTFRIEND>(Arena*);
template<> ::Protocol::S_REQUESTRESPONSE* Arena::CreateMaybeMessage<::Protocol::S_REQUESTRESPONSE>(Arena*);
template<> ::Protocol::S_RUDPACK* Arena::CreateMaybeMessage<::Protocol::S_RUDPACK>(Arena*);
template<> ::Protocol::S_SENDMSG* Arena::CreateMaybeMessage<::Protocol::S_SENDMSG>(Arena*);
template<> ::Protocol::S_SHAREPUBLICKEY* Arena::CreateMaybeMessage<::Protocol::S_SHAREPUBLICKEY>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_DISCONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DISCONNECT) */ {
 public:
  inline C_DISCONNECT() : C_DISCONNECT(nullptr) {}
  ~C_DISCONNECT() override;
  explicit constexpr C_DISCONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DISCONNECT(const C_DISCONNECT& from);
  C_DISCONNECT(C_DISCONNECT&& from) noexcept
    : C_DISCONNECT() {
    *this = ::std::move(from);
  }

  inline C_DISCONNECT& operator=(const C_DISCONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DISCONNECT& operator=(C_DISCONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DISCONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DISCONNECT* internal_default_instance() {
    return reinterpret_cast<const C_DISCONNECT*>(
               &_C_DISCONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_DISCONNECT& a, C_DISCONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DISCONNECT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DISCONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_DISCONNECT* New() const final {
    return new C_DISCONNECT();
  }

  C_DISCONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_DISCONNECT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_DISCONNECT& from);
  void MergeFrom(const C_DISCONNECT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DISCONNECT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DISCONNECT";
  }
  protected:
  explicit C_DISCONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRoomidFieldNumber = 2,
    kRoomprimidFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomid = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomprimid = 3;
  void clear_roomprimid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomprimid() const;
  void set_roomprimid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomprimid() const;
  void _internal_set_roomprimid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DISCONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomprimid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DISCONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DISCONNECT) */ {
 public:
  inline S_DISCONNECT() : S_DISCONNECT(nullptr) {}
  ~S_DISCONNECT() override;
  explicit constexpr S_DISCONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DISCONNECT(const S_DISCONNECT& from);
  S_DISCONNECT(S_DISCONNECT&& from) noexcept
    : S_DISCONNECT() {
    *this = ::std::move(from);
  }

  inline S_DISCONNECT& operator=(const S_DISCONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DISCONNECT& operator=(S_DISCONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DISCONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DISCONNECT* internal_default_instance() {
    return reinterpret_cast<const S_DISCONNECT*>(
               &_S_DISCONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_DISCONNECT& a, S_DISCONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DISCONNECT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DISCONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_DISCONNECT* New() const final {
    return new S_DISCONNECT();
  }

  S_DISCONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_DISCONNECT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_DISCONNECT& from);
  void MergeFrom(const S_DISCONNECT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DISCONNECT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DISCONNECT";
  }
  protected:
  explicit S_DISCONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_DISCONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit constexpr C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LOGIN* New() const final {
    return new C_LOGIN();
  }

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LOGIN& from);
  void MergeFrom(const C_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit constexpr S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LOGIN* New() const final {
    return new S_LOGIN();
  }

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LOGIN& from);
  void MergeFrom(const S_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kFriendcodeFieldNumber = 4,
    kBsuccessFieldNumber = 1,
    kPrimidFieldNumber = 3,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string friendcode = 4;
  void clear_friendcode();
  const std::string& friendcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendcode();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_friendcode();
  void set_allocated_friendcode(std::string* friendcode);
  private:
  const std::string& _internal_friendcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendcode(const std::string& value);
  std::string* _internal_mutable_friendcode();
  public:

  // int32 bsuccess = 1;
  void clear_bsuccess();
  ::PROTOBUF_NAMESPACE_ID::int32 bsuccess() const;
  void set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bsuccess() const;
  void _internal_set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 primid = 3;
  void clear_primid();
  ::PROTOBUF_NAMESPACE_ID::int32 primid() const;
  void set_primid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_primid() const;
  void _internal_set_primid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 bsuccess_;
  ::PROTOBUF_NAMESPACE_ID::int32 primid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MAKEACCOUNT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MAKEACCOUNT) */ {
 public:
  inline C_MAKEACCOUNT() : C_MAKEACCOUNT(nullptr) {}
  ~C_MAKEACCOUNT() override;
  explicit constexpr C_MAKEACCOUNT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MAKEACCOUNT(const C_MAKEACCOUNT& from);
  C_MAKEACCOUNT(C_MAKEACCOUNT&& from) noexcept
    : C_MAKEACCOUNT() {
    *this = ::std::move(from);
  }

  inline C_MAKEACCOUNT& operator=(const C_MAKEACCOUNT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MAKEACCOUNT& operator=(C_MAKEACCOUNT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MAKEACCOUNT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MAKEACCOUNT* internal_default_instance() {
    return reinterpret_cast<const C_MAKEACCOUNT*>(
               &_C_MAKEACCOUNT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_MAKEACCOUNT& a, C_MAKEACCOUNT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MAKEACCOUNT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MAKEACCOUNT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_MAKEACCOUNT* New() const final {
    return new C_MAKEACCOUNT();
  }

  C_MAKEACCOUNT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_MAKEACCOUNT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_MAKEACCOUNT& from);
  void MergeFrom(const C_MAKEACCOUNT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MAKEACCOUNT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MAKEACCOUNT";
  }
  protected:
  explicit C_MAKEACCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
    kNicknameFieldNumber = 3,
    kEmailFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string email = 4;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MAKEACCOUNT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MAKEACCOUNT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MAKEACCOUNT) */ {
 public:
  inline S_MAKEACCOUNT() : S_MAKEACCOUNT(nullptr) {}
  ~S_MAKEACCOUNT() override;
  explicit constexpr S_MAKEACCOUNT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MAKEACCOUNT(const S_MAKEACCOUNT& from);
  S_MAKEACCOUNT(S_MAKEACCOUNT&& from) noexcept
    : S_MAKEACCOUNT() {
    *this = ::std::move(from);
  }

  inline S_MAKEACCOUNT& operator=(const S_MAKEACCOUNT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MAKEACCOUNT& operator=(S_MAKEACCOUNT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MAKEACCOUNT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MAKEACCOUNT* internal_default_instance() {
    return reinterpret_cast<const S_MAKEACCOUNT*>(
               &_S_MAKEACCOUNT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_MAKEACCOUNT& a, S_MAKEACCOUNT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MAKEACCOUNT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MAKEACCOUNT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_MAKEACCOUNT* New() const final {
    return new S_MAKEACCOUNT();
  }

  S_MAKEACCOUNT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_MAKEACCOUNT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_MAKEACCOUNT& from);
  void MergeFrom(const S_MAKEACCOUNT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MAKEACCOUNT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MAKEACCOUNT";
  }
  protected:
  explicit S_MAKEACCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MAKEACCOUNT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_RUDPACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_RUDPACK) */ {
 public:
  inline C_RUDPACK() : C_RUDPACK(nullptr) {}
  ~C_RUDPACK() override;
  explicit constexpr C_RUDPACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_RUDPACK(const C_RUDPACK& from);
  C_RUDPACK(C_RUDPACK&& from) noexcept
    : C_RUDPACK() {
    *this = ::std::move(from);
  }

  inline C_RUDPACK& operator=(const C_RUDPACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_RUDPACK& operator=(C_RUDPACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_RUDPACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_RUDPACK* internal_default_instance() {
    return reinterpret_cast<const C_RUDPACK*>(
               &_C_RUDPACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_RUDPACK& a, C_RUDPACK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_RUDPACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_RUDPACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_RUDPACK* New() const final {
    return new C_RUDPACK();
  }

  C_RUDPACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_RUDPACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_RUDPACK& from);
  void MergeFrom(const C_RUDPACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_RUDPACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_RUDPACK";
  }
  protected:
  explicit C_RUDPACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBhascountFieldNumber = 1,
    kStartFieldNumber = 2,
    kCountFieldNumber = 3,
    kPlayeridFieldNumber = 4,
  };
  // int32 bhascount = 1;
  void clear_bhascount();
  ::PROTOBUF_NAMESPACE_ID::int32 bhascount() const;
  void set_bhascount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bhascount() const;
  void _internal_set_bhascount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerid = 4;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_RUDPACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bhascount_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_RUDPACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_RUDPACK) */ {
 public:
  inline S_RUDPACK() : S_RUDPACK(nullptr) {}
  ~S_RUDPACK() override;
  explicit constexpr S_RUDPACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_RUDPACK(const S_RUDPACK& from);
  S_RUDPACK(S_RUDPACK&& from) noexcept
    : S_RUDPACK() {
    *this = ::std::move(from);
  }

  inline S_RUDPACK& operator=(const S_RUDPACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_RUDPACK& operator=(S_RUDPACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_RUDPACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_RUDPACK* internal_default_instance() {
    return reinterpret_cast<const S_RUDPACK*>(
               &_S_RUDPACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_RUDPACK& a, S_RUDPACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_RUDPACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_RUDPACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_RUDPACK* New() const final {
    return new S_RUDPACK();
  }

  S_RUDPACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_RUDPACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_RUDPACK& from);
  void MergeFrom(const S_RUDPACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_RUDPACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_RUDPACK";
  }
  protected:
  explicit S_RUDPACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBhascountFieldNumber = 1,
    kStartFieldNumber = 2,
    kCountFieldNumber = 3,
    kPlayeridFieldNumber = 4,
  };
  // int32 bhascount = 1;
  void clear_bhascount();
  ::PROTOBUF_NAMESPACE_ID::int32 bhascount() const;
  void set_bhascount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bhascount() const;
  void _internal_set_bhascount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerid = 4;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_RUDPACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bhascount_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_FINDACCOUNT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_FINDACCOUNT) */ {
 public:
  inline C_FINDACCOUNT() : C_FINDACCOUNT(nullptr) {}
  ~C_FINDACCOUNT() override;
  explicit constexpr C_FINDACCOUNT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_FINDACCOUNT(const C_FINDACCOUNT& from);
  C_FINDACCOUNT(C_FINDACCOUNT&& from) noexcept
    : C_FINDACCOUNT() {
    *this = ::std::move(from);
  }

  inline C_FINDACCOUNT& operator=(const C_FINDACCOUNT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_FINDACCOUNT& operator=(C_FINDACCOUNT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_FINDACCOUNT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_FINDACCOUNT* internal_default_instance() {
    return reinterpret_cast<const C_FINDACCOUNT*>(
               &_C_FINDACCOUNT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_FINDACCOUNT& a, C_FINDACCOUNT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_FINDACCOUNT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_FINDACCOUNT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_FINDACCOUNT* New() const final {
    return new C_FINDACCOUNT();
  }

  C_FINDACCOUNT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_FINDACCOUNT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_FINDACCOUNT& from);
  void MergeFrom(const C_FINDACCOUNT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_FINDACCOUNT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_FINDACCOUNT";
  }
  protected:
  explicit C_FINDACCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_FINDACCOUNT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_FINDACCOUNT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FINDACCOUNT) */ {
 public:
  inline S_FINDACCOUNT() : S_FINDACCOUNT(nullptr) {}
  ~S_FINDACCOUNT() override;
  explicit constexpr S_FINDACCOUNT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FINDACCOUNT(const S_FINDACCOUNT& from);
  S_FINDACCOUNT(S_FINDACCOUNT&& from) noexcept
    : S_FINDACCOUNT() {
    *this = ::std::move(from);
  }

  inline S_FINDACCOUNT& operator=(const S_FINDACCOUNT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FINDACCOUNT& operator=(S_FINDACCOUNT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FINDACCOUNT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FINDACCOUNT* internal_default_instance() {
    return reinterpret_cast<const S_FINDACCOUNT*>(
               &_S_FINDACCOUNT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_FINDACCOUNT& a, S_FINDACCOUNT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FINDACCOUNT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FINDACCOUNT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_FINDACCOUNT* New() const final {
    return new S_FINDACCOUNT();
  }

  S_FINDACCOUNT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_FINDACCOUNT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_FINDACCOUNT& from);
  void MergeFrom(const S_FINDACCOUNT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FINDACCOUNT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FINDACCOUNT";
  }
  protected:
  explicit S_FINDACCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FINDACCOUNT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_REQUESTFRIEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_REQUESTFRIEND) */ {
 public:
  inline C_REQUESTFRIEND() : C_REQUESTFRIEND(nullptr) {}
  ~C_REQUESTFRIEND() override;
  explicit constexpr C_REQUESTFRIEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_REQUESTFRIEND(const C_REQUESTFRIEND& from);
  C_REQUESTFRIEND(C_REQUESTFRIEND&& from) noexcept
    : C_REQUESTFRIEND() {
    *this = ::std::move(from);
  }

  inline C_REQUESTFRIEND& operator=(const C_REQUESTFRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_REQUESTFRIEND& operator=(C_REQUESTFRIEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_REQUESTFRIEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_REQUESTFRIEND* internal_default_instance() {
    return reinterpret_cast<const C_REQUESTFRIEND*>(
               &_C_REQUESTFRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_REQUESTFRIEND& a, C_REQUESTFRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(C_REQUESTFRIEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_REQUESTFRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_REQUESTFRIEND* New() const final {
    return new C_REQUESTFRIEND();
  }

  C_REQUESTFRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_REQUESTFRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_REQUESTFRIEND& from);
  void MergeFrom(const C_REQUESTFRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_REQUESTFRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_REQUESTFRIEND";
  }
  protected:
  explicit C_REQUESTFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimidFieldNumber = 1,
    kFriendcodeFieldNumber = 2,
  };
  // string primid = 1;
  void clear_primid();
  const std::string& primid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_primid();
  void set_allocated_primid(std::string* primid);
  private:
  const std::string& _internal_primid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primid(const std::string& value);
  std::string* _internal_mutable_primid();
  public:

  // string friendcode = 2;
  void clear_friendcode();
  const std::string& friendcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendcode();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_friendcode();
  void set_allocated_friendcode(std::string* friendcode);
  private:
  const std::string& _internal_friendcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendcode(const std::string& value);
  std::string* _internal_mutable_friendcode();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_REQUESTFRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_REQUESTFRIEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_REQUESTFRIEND) */ {
 public:
  inline S_REQUESTFRIEND() : S_REQUESTFRIEND(nullptr) {}
  ~S_REQUESTFRIEND() override;
  explicit constexpr S_REQUESTFRIEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_REQUESTFRIEND(const S_REQUESTFRIEND& from);
  S_REQUESTFRIEND(S_REQUESTFRIEND&& from) noexcept
    : S_REQUESTFRIEND() {
    *this = ::std::move(from);
  }

  inline S_REQUESTFRIEND& operator=(const S_REQUESTFRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_REQUESTFRIEND& operator=(S_REQUESTFRIEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_REQUESTFRIEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_REQUESTFRIEND* internal_default_instance() {
    return reinterpret_cast<const S_REQUESTFRIEND*>(
               &_S_REQUESTFRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_REQUESTFRIEND& a, S_REQUESTFRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(S_REQUESTFRIEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_REQUESTFRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_REQUESTFRIEND* New() const final {
    return new S_REQUESTFRIEND();
  }

  S_REQUESTFRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_REQUESTFRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_REQUESTFRIEND& from);
  void MergeFrom(const S_REQUESTFRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_REQUESTFRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_REQUESTFRIEND";
  }
  protected:
  explicit S_REQUESTFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsuccessFieldNumber = 1,
  };
  // int32 bsuccess = 1;
  void clear_bsuccess();
  ::PROTOBUF_NAMESPACE_ID::int32 bsuccess() const;
  void set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bsuccess() const;
  void _internal_set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_REQUESTFRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bsuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_GETFRIENDREQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_GETFRIENDREQUEST) */ {
 public:
  inline C_GETFRIENDREQUEST() : C_GETFRIENDREQUEST(nullptr) {}
  ~C_GETFRIENDREQUEST() override;
  explicit constexpr C_GETFRIENDREQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GETFRIENDREQUEST(const C_GETFRIENDREQUEST& from);
  C_GETFRIENDREQUEST(C_GETFRIENDREQUEST&& from) noexcept
    : C_GETFRIENDREQUEST() {
    *this = ::std::move(from);
  }

  inline C_GETFRIENDREQUEST& operator=(const C_GETFRIENDREQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GETFRIENDREQUEST& operator=(C_GETFRIENDREQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GETFRIENDREQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GETFRIENDREQUEST* internal_default_instance() {
    return reinterpret_cast<const C_GETFRIENDREQUEST*>(
               &_C_GETFRIENDREQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_GETFRIENDREQUEST& a, C_GETFRIENDREQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GETFRIENDREQUEST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GETFRIENDREQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_GETFRIENDREQUEST* New() const final {
    return new C_GETFRIENDREQUEST();
  }

  C_GETFRIENDREQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_GETFRIENDREQUEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_GETFRIENDREQUEST& from);
  void MergeFrom(const C_GETFRIENDREQUEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_GETFRIENDREQUEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_GETFRIENDREQUEST";
  }
  protected:
  explicit C_GETFRIENDREQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimidFieldNumber = 1,
  };
  // string primid = 1;
  void clear_primid();
  const std::string& primid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_primid();
  void set_allocated_primid(std::string* primid);
  private:
  const std::string& _internal_primid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primid(const std::string& value);
  std::string* _internal_mutable_primid();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_GETFRIENDREQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GETFRIENDREQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GETFRIENDREQUEST) */ {
 public:
  inline S_GETFRIENDREQUEST() : S_GETFRIENDREQUEST(nullptr) {}
  ~S_GETFRIENDREQUEST() override;
  explicit constexpr S_GETFRIENDREQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GETFRIENDREQUEST(const S_GETFRIENDREQUEST& from);
  S_GETFRIENDREQUEST(S_GETFRIENDREQUEST&& from) noexcept
    : S_GETFRIENDREQUEST() {
    *this = ::std::move(from);
  }

  inline S_GETFRIENDREQUEST& operator=(const S_GETFRIENDREQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GETFRIENDREQUEST& operator=(S_GETFRIENDREQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GETFRIENDREQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GETFRIENDREQUEST* internal_default_instance() {
    return reinterpret_cast<const S_GETFRIENDREQUEST*>(
               &_S_GETFRIENDREQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_GETFRIENDREQUEST& a, S_GETFRIENDREQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GETFRIENDREQUEST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GETFRIENDREQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_GETFRIENDREQUEST* New() const final {
    return new S_GETFRIENDREQUEST();
  }

  S_GETFRIENDREQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_GETFRIENDREQUEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_GETFRIENDREQUEST& from);
  void MergeFrom(const S_GETFRIENDREQUEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GETFRIENDREQUEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GETFRIENDREQUEST";
  }
  protected:
  explicit S_GETFRIENDREQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 1,
  };
  // repeated .Protocol.Friend requests = 1;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::Protocol::Friend* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend >*
      mutable_requests();
  private:
  const ::Protocol::Friend& _internal_requests(int index) const;
  ::Protocol::Friend* _internal_add_requests();
  public:
  const ::Protocol::Friend& requests(int index) const;
  ::Protocol::Friend* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend >&
      requests() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_GETFRIENDREQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend > requests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_REQUESTRESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_REQUESTRESPONSE) */ {
 public:
  inline C_REQUESTRESPONSE() : C_REQUESTRESPONSE(nullptr) {}
  ~C_REQUESTRESPONSE() override;
  explicit constexpr C_REQUESTRESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_REQUESTRESPONSE(const C_REQUESTRESPONSE& from);
  C_REQUESTRESPONSE(C_REQUESTRESPONSE&& from) noexcept
    : C_REQUESTRESPONSE() {
    *this = ::std::move(from);
  }

  inline C_REQUESTRESPONSE& operator=(const C_REQUESTRESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_REQUESTRESPONSE& operator=(C_REQUESTRESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_REQUESTRESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_REQUESTRESPONSE* internal_default_instance() {
    return reinterpret_cast<const C_REQUESTRESPONSE*>(
               &_C_REQUESTRESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_REQUESTRESPONSE& a, C_REQUESTRESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_REQUESTRESPONSE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_REQUESTRESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_REQUESTRESPONSE* New() const final {
    return new C_REQUESTRESPONSE();
  }

  C_REQUESTRESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_REQUESTRESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_REQUESTRESPONSE& from);
  void MergeFrom(const C_REQUESTRESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_REQUESTRESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_REQUESTRESPONSE";
  }
  protected:
  explicit C_REQUESTRESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimidFieldNumber = 1,
    kFprimidFieldNumber = 2,
    kResponseFieldNumber = 3,
    kListindexFieldNumber = 4,
  };
  // string primid = 1;
  void clear_primid();
  const std::string& primid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_primid();
  void set_allocated_primid(std::string* primid);
  private:
  const std::string& _internal_primid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primid(const std::string& value);
  std::string* _internal_mutable_primid();
  public:

  // string fprimid = 2;
  void clear_fprimid();
  const std::string& fprimid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fprimid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fprimid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_fprimid();
  void set_allocated_fprimid(std::string* fprimid);
  private:
  const std::string& _internal_fprimid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fprimid(const std::string& value);
  std::string* _internal_mutable_fprimid();
  public:

  // int32 response = 3;
  void clear_response();
  ::PROTOBUF_NAMESPACE_ID::int32 response() const;
  void set_response(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_response() const;
  void _internal_set_response(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 listindex = 4;
  void clear_listindex();
  ::PROTOBUF_NAMESPACE_ID::int32 listindex() const;
  void set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listindex() const;
  void _internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_REQUESTRESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fprimid_;
  ::PROTOBUF_NAMESPACE_ID::int32 response_;
  ::PROTOBUF_NAMESPACE_ID::int32 listindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_REQUESTRESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_REQUESTRESPONSE) */ {
 public:
  inline S_REQUESTRESPONSE() : S_REQUESTRESPONSE(nullptr) {}
  ~S_REQUESTRESPONSE() override;
  explicit constexpr S_REQUESTRESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_REQUESTRESPONSE(const S_REQUESTRESPONSE& from);
  S_REQUESTRESPONSE(S_REQUESTRESPONSE&& from) noexcept
    : S_REQUESTRESPONSE() {
    *this = ::std::move(from);
  }

  inline S_REQUESTRESPONSE& operator=(const S_REQUESTRESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_REQUESTRESPONSE& operator=(S_REQUESTRESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_REQUESTRESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_REQUESTRESPONSE* internal_default_instance() {
    return reinterpret_cast<const S_REQUESTRESPONSE*>(
               &_S_REQUESTRESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_REQUESTRESPONSE& a, S_REQUESTRESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_REQUESTRESPONSE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_REQUESTRESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_REQUESTRESPONSE* New() const final {
    return new S_REQUESTRESPONSE();
  }

  S_REQUESTRESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_REQUESTRESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_REQUESTRESPONSE& from);
  void MergeFrom(const S_REQUESTRESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_REQUESTRESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_REQUESTRESPONSE";
  }
  protected:
  explicit S_REQUESTRESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsuccessFieldNumber = 1,
    kListindexFieldNumber = 2,
  };
  // int32 bsuccess = 1;
  void clear_bsuccess();
  ::PROTOBUF_NAMESPACE_ID::int32 bsuccess() const;
  void set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bsuccess() const;
  void _internal_set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 listindex = 2;
  void clear_listindex();
  ::PROTOBUF_NAMESPACE_ID::int32 listindex() const;
  void set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listindex() const;
  void _internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_REQUESTRESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bsuccess_;
  ::PROTOBUF_NAMESPACE_ID::int32 listindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_GETFRIENDS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_GETFRIENDS) */ {
 public:
  inline C_GETFRIENDS() : C_GETFRIENDS(nullptr) {}
  ~C_GETFRIENDS() override;
  explicit constexpr C_GETFRIENDS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GETFRIENDS(const C_GETFRIENDS& from);
  C_GETFRIENDS(C_GETFRIENDS&& from) noexcept
    : C_GETFRIENDS() {
    *this = ::std::move(from);
  }

  inline C_GETFRIENDS& operator=(const C_GETFRIENDS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GETFRIENDS& operator=(C_GETFRIENDS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GETFRIENDS& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GETFRIENDS* internal_default_instance() {
    return reinterpret_cast<const C_GETFRIENDS*>(
               &_C_GETFRIENDS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_GETFRIENDS& a, C_GETFRIENDS& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GETFRIENDS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GETFRIENDS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_GETFRIENDS* New() const final {
    return new C_GETFRIENDS();
  }

  C_GETFRIENDS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_GETFRIENDS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_GETFRIENDS& from);
  void MergeFrom(const C_GETFRIENDS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_GETFRIENDS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_GETFRIENDS";
  }
  protected:
  explicit C_GETFRIENDS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimidFieldNumber = 1,
  };
  // string primid = 1;
  void clear_primid();
  const std::string& primid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_primid();
  void set_allocated_primid(std::string* primid);
  private:
  const std::string& _internal_primid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primid(const std::string& value);
  std::string* _internal_mutable_primid();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_GETFRIENDS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GETFRIENDS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GETFRIENDS) */ {
 public:
  inline S_GETFRIENDS() : S_GETFRIENDS(nullptr) {}
  ~S_GETFRIENDS() override;
  explicit constexpr S_GETFRIENDS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GETFRIENDS(const S_GETFRIENDS& from);
  S_GETFRIENDS(S_GETFRIENDS&& from) noexcept
    : S_GETFRIENDS() {
    *this = ::std::move(from);
  }

  inline S_GETFRIENDS& operator=(const S_GETFRIENDS& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GETFRIENDS& operator=(S_GETFRIENDS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GETFRIENDS& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GETFRIENDS* internal_default_instance() {
    return reinterpret_cast<const S_GETFRIENDS*>(
               &_S_GETFRIENDS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_GETFRIENDS& a, S_GETFRIENDS& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GETFRIENDS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GETFRIENDS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_GETFRIENDS* New() const final {
    return new S_GETFRIENDS();
  }

  S_GETFRIENDS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_GETFRIENDS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_GETFRIENDS& from);
  void MergeFrom(const S_GETFRIENDS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GETFRIENDS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GETFRIENDS";
  }
  protected:
  explicit S_GETFRIENDS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 5,
  };
  // repeated .Protocol.Friend friends = 5;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::Protocol::Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend >*
      mutable_friends();
  private:
  const ::Protocol::Friend& _internal_friends(int index) const;
  ::Protocol::Friend* _internal_add_friends();
  public:
  const ::Protocol::Friend& friends(int index) const;
  ::Protocol::Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend >&
      friends() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_GETFRIENDS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SENDMSG final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SENDMSG) */ {
 public:
  inline C_SENDMSG() : C_SENDMSG(nullptr) {}
  ~C_SENDMSG() override;
  explicit constexpr C_SENDMSG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SENDMSG(const C_SENDMSG& from);
  C_SENDMSG(C_SENDMSG&& from) noexcept
    : C_SENDMSG() {
    *this = ::std::move(from);
  }

  inline C_SENDMSG& operator=(const C_SENDMSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SENDMSG& operator=(C_SENDMSG&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SENDMSG& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SENDMSG* internal_default_instance() {
    return reinterpret_cast<const C_SENDMSG*>(
               &_C_SENDMSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_SENDMSG& a, C_SENDMSG& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SENDMSG* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SENDMSG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SENDMSG* New() const final {
    return new C_SENDMSG();
  }

  C_SENDMSG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SENDMSG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SENDMSG& from);
  void MergeFrom(const C_SENDMSG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SENDMSG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SENDMSG";
  }
  protected:
  explicit C_SENDMSG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIdFieldNumber = 1,
    kToIdFieldNumber = 2,
    kMsgFieldNumber = 3,
    kListindexFieldNumber = 4,
  };
  // string from_id = 1;
  void clear_from_id();
  const std::string& from_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_from_id();
  void set_allocated_from_id(std::string* from_id);
  private:
  const std::string& _internal_from_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_id(const std::string& value);
  std::string* _internal_mutable_from_id();
  public:

  // string to_id = 2;
  void clear_to_id();
  const std::string& to_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_to_id();
  void set_allocated_to_id(std::string* to_id);
  private:
  const std::string& _internal_to_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_id(const std::string& value);
  std::string* _internal_mutable_to_id();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 listindex = 4;
  void clear_listindex();
  ::PROTOBUF_NAMESPACE_ID::int32 listindex() const;
  void set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listindex() const;
  void _internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SENDMSG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 listindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SENDMSG final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SENDMSG) */ {
 public:
  inline S_SENDMSG() : S_SENDMSG(nullptr) {}
  ~S_SENDMSG() override;
  explicit constexpr S_SENDMSG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SENDMSG(const S_SENDMSG& from);
  S_SENDMSG(S_SENDMSG&& from) noexcept
    : S_SENDMSG() {
    *this = ::std::move(from);
  }

  inline S_SENDMSG& operator=(const S_SENDMSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SENDMSG& operator=(S_SENDMSG&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SENDMSG& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SENDMSG* internal_default_instance() {
    return reinterpret_cast<const S_SENDMSG*>(
               &_S_SENDMSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_SENDMSG& a, S_SENDMSG& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SENDMSG* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SENDMSG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SENDMSG* New() const final {
    return new S_SENDMSG();
  }

  S_SENDMSG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SENDMSG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SENDMSG& from);
  void MergeFrom(const S_SENDMSG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SENDMSG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SENDMSG";
  }
  protected:
  explicit S_SENDMSG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIdFieldNumber = 1,
    kToIdFieldNumber = 2,
    kMsgFieldNumber = 3,
    kListindexFieldNumber = 4,
  };
  // string from_id = 1;
  void clear_from_id();
  const std::string& from_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_from_id();
  void set_allocated_from_id(std::string* from_id);
  private:
  const std::string& _internal_from_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_id(const std::string& value);
  std::string* _internal_mutable_from_id();
  public:

  // string to_id = 2;
  void clear_to_id();
  const std::string& to_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_to_id();
  void set_allocated_to_id(std::string* to_id);
  private:
  const std::string& _internal_to_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_id(const std::string& value);
  std::string* _internal_mutable_to_id();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 listindex = 4;
  void clear_listindex();
  ::PROTOBUF_NAMESPACE_ID::int32 listindex() const;
  void set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listindex() const;
  void _internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SENDMSG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 listindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_GETCHATLOG final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_GETCHATLOG) */ {
 public:
  inline C_GETCHATLOG() : C_GETCHATLOG(nullptr) {}
  ~C_GETCHATLOG() override;
  explicit constexpr C_GETCHATLOG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GETCHATLOG(const C_GETCHATLOG& from);
  C_GETCHATLOG(C_GETCHATLOG&& from) noexcept
    : C_GETCHATLOG() {
    *this = ::std::move(from);
  }

  inline C_GETCHATLOG& operator=(const C_GETCHATLOG& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GETCHATLOG& operator=(C_GETCHATLOG&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GETCHATLOG& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GETCHATLOG* internal_default_instance() {
    return reinterpret_cast<const C_GETCHATLOG*>(
               &_C_GETCHATLOG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C_GETCHATLOG& a, C_GETCHATLOG& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GETCHATLOG* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GETCHATLOG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_GETCHATLOG* New() const final {
    return new C_GETCHATLOG();
  }

  C_GETCHATLOG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_GETCHATLOG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_GETCHATLOG& from);
  void MergeFrom(const C_GETCHATLOG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_GETCHATLOG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_GETCHATLOG";
  }
  protected:
  explicit C_GETCHATLOG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimidFieldNumber = 1,
    kToIdFieldNumber = 2,
    kListindexFieldNumber = 3,
  };
  // string primid = 1;
  void clear_primid();
  const std::string& primid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_primid();
  void set_allocated_primid(std::string* primid);
  private:
  const std::string& _internal_primid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primid(const std::string& value);
  std::string* _internal_mutable_primid();
  public:

  // string to_id = 2;
  void clear_to_id();
  const std::string& to_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_to_id();
  void set_allocated_to_id(std::string* to_id);
  private:
  const std::string& _internal_to_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_id(const std::string& value);
  std::string* _internal_mutable_to_id();
  public:

  // int32 listindex = 3;
  void clear_listindex();
  ::PROTOBUF_NAMESPACE_ID::int32 listindex() const;
  void set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listindex() const;
  void _internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_GETCHATLOG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 listindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GETCHATLOG final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GETCHATLOG) */ {
 public:
  inline S_GETCHATLOG() : S_GETCHATLOG(nullptr) {}
  ~S_GETCHATLOG() override;
  explicit constexpr S_GETCHATLOG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GETCHATLOG(const S_GETCHATLOG& from);
  S_GETCHATLOG(S_GETCHATLOG&& from) noexcept
    : S_GETCHATLOG() {
    *this = ::std::move(from);
  }

  inline S_GETCHATLOG& operator=(const S_GETCHATLOG& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GETCHATLOG& operator=(S_GETCHATLOG&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GETCHATLOG& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GETCHATLOG* internal_default_instance() {
    return reinterpret_cast<const S_GETCHATLOG*>(
               &_S_GETCHATLOG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_GETCHATLOG& a, S_GETCHATLOG& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GETCHATLOG* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GETCHATLOG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_GETCHATLOG* New() const final {
    return new S_GETCHATLOG();
  }

  S_GETCHATLOG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_GETCHATLOG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_GETCHATLOG& from);
  void MergeFrom(const S_GETCHATLOG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GETCHATLOG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GETCHATLOG";
  }
  protected:
  explicit S_GETCHATLOG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 2,
    kListindexFieldNumber = 1,
  };
  // repeated .Protocol.ChatLog logs = 2;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::Protocol::ChatLog* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatLog >*
      mutable_logs();
  private:
  const ::Protocol::ChatLog& _internal_logs(int index) const;
  ::Protocol::ChatLog* _internal_add_logs();
  public:
  const ::Protocol::ChatLog& logs(int index) const;
  ::Protocol::ChatLog* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatLog >&
      logs() const;

  // int32 listindex = 1;
  void clear_listindex();
  ::PROTOBUF_NAMESPACE_ID::int32 listindex() const;
  void set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listindex() const;
  void _internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_GETCHATLOG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatLog > logs_;
  ::PROTOBUF_NAMESPACE_ID::int32 listindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SHAREPUBLICKEY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SHAREPUBLICKEY) */ {
 public:
  inline C_SHAREPUBLICKEY() : C_SHAREPUBLICKEY(nullptr) {}
  ~C_SHAREPUBLICKEY() override;
  explicit constexpr C_SHAREPUBLICKEY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SHAREPUBLICKEY(const C_SHAREPUBLICKEY& from);
  C_SHAREPUBLICKEY(C_SHAREPUBLICKEY&& from) noexcept
    : C_SHAREPUBLICKEY() {
    *this = ::std::move(from);
  }

  inline C_SHAREPUBLICKEY& operator=(const C_SHAREPUBLICKEY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SHAREPUBLICKEY& operator=(C_SHAREPUBLICKEY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SHAREPUBLICKEY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SHAREPUBLICKEY* internal_default_instance() {
    return reinterpret_cast<const C_SHAREPUBLICKEY*>(
               &_C_SHAREPUBLICKEY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(C_SHAREPUBLICKEY& a, C_SHAREPUBLICKEY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SHAREPUBLICKEY* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SHAREPUBLICKEY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SHAREPUBLICKEY* New() const final {
    return new C_SHAREPUBLICKEY();
  }

  C_SHAREPUBLICKEY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SHAREPUBLICKEY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SHAREPUBLICKEY& from);
  void MergeFrom(const C_SHAREPUBLICKEY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SHAREPUBLICKEY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SHAREPUBLICKEY";
  }
  protected:
  explicit C_SHAREPUBLICKEY(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublickeyFieldNumber = 2,
    kPrimidFieldNumber = 1,
  };
  // bytes publickey = 2;
  void clear_publickey();
  const std::string& publickey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publickey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publickey();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // int32 primid = 1;
  void clear_primid();
  ::PROTOBUF_NAMESPACE_ID::int32 primid() const;
  void set_primid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_primid() const;
  void _internal_set_primid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SHAREPUBLICKEY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  ::PROTOBUF_NAMESPACE_ID::int32 primid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SHAREPUBLICKEY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SHAREPUBLICKEY) */ {
 public:
  inline S_SHAREPUBLICKEY() : S_SHAREPUBLICKEY(nullptr) {}
  ~S_SHAREPUBLICKEY() override;
  explicit constexpr S_SHAREPUBLICKEY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SHAREPUBLICKEY(const S_SHAREPUBLICKEY& from);
  S_SHAREPUBLICKEY(S_SHAREPUBLICKEY&& from) noexcept
    : S_SHAREPUBLICKEY() {
    *this = ::std::move(from);
  }

  inline S_SHAREPUBLICKEY& operator=(const S_SHAREPUBLICKEY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SHAREPUBLICKEY& operator=(S_SHAREPUBLICKEY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SHAREPUBLICKEY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SHAREPUBLICKEY* internal_default_instance() {
    return reinterpret_cast<const S_SHAREPUBLICKEY*>(
               &_S_SHAREPUBLICKEY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_SHAREPUBLICKEY& a, S_SHAREPUBLICKEY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SHAREPUBLICKEY* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SHAREPUBLICKEY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SHAREPUBLICKEY* New() const final {
    return new S_SHAREPUBLICKEY();
  }

  S_SHAREPUBLICKEY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SHAREPUBLICKEY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SHAREPUBLICKEY& from);
  void MergeFrom(const S_SHAREPUBLICKEY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SHAREPUBLICKEY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SHAREPUBLICKEY";
  }
  protected:
  explicit S_SHAREPUBLICKEY(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublickeyFieldNumber = 1,
  };
  // bytes publickey = 1;
  void clear_publickey();
  const std::string& publickey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publickey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publickey();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SHAREPUBLICKEY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_KEYREADY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_KEYREADY) */ {
 public:
  inline C_KEYREADY() : C_KEYREADY(nullptr) {}
  ~C_KEYREADY() override;
  explicit constexpr C_KEYREADY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_KEYREADY(const C_KEYREADY& from);
  C_KEYREADY(C_KEYREADY&& from) noexcept
    : C_KEYREADY() {
    *this = ::std::move(from);
  }

  inline C_KEYREADY& operator=(const C_KEYREADY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_KEYREADY& operator=(C_KEYREADY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_KEYREADY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_KEYREADY* internal_default_instance() {
    return reinterpret_cast<const C_KEYREADY*>(
               &_C_KEYREADY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(C_KEYREADY& a, C_KEYREADY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_KEYREADY* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_KEYREADY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_KEYREADY* New() const final {
    return new C_KEYREADY();
  }

  C_KEYREADY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_KEYREADY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_KEYREADY& from);
  void MergeFrom(const C_KEYREADY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_KEYREADY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_KEYREADY";
  }
  protected:
  explicit C_KEYREADY(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBreadyFieldNumber = 1,
    kPrimidFieldNumber = 2,
  };
  // int32 bready = 1;
  void clear_bready();
  ::PROTOBUF_NAMESPACE_ID::int32 bready() const;
  void set_bready(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bready() const;
  void _internal_set_bready(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 primid = 2;
  void clear_primid();
  ::PROTOBUF_NAMESPACE_ID::int32 primid() const;
  void set_primid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_primid() const;
  void _internal_set_primid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_KEYREADY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bready_;
  ::PROTOBUF_NAMESPACE_ID::int32 primid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_DISCONNECT

// int32 id = 1;
inline void C_DISCONNECT::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_DISCONNECT::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_DISCONNECT::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DISCONNECT.id)
  return _internal_id();
}
inline void C_DISCONNECT::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void C_DISCONNECT::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DISCONNECT.id)
}

// int32 roomid = 2;
inline void C_DISCONNECT::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_DISCONNECT::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_DISCONNECT::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DISCONNECT.roomid)
  return _internal_roomid();
}
inline void C_DISCONNECT::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void C_DISCONNECT::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DISCONNECT.roomid)
}

// int32 roomprimid = 3;
inline void C_DISCONNECT::clear_roomprimid() {
  roomprimid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_DISCONNECT::_internal_roomprimid() const {
  return roomprimid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_DISCONNECT::roomprimid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DISCONNECT.roomprimid)
  return _internal_roomprimid();
}
inline void C_DISCONNECT::_internal_set_roomprimid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomprimid_ = value;
}
inline void C_DISCONNECT::set_roomprimid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomprimid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DISCONNECT.roomprimid)
}

// -------------------------------------------------------------------

// S_DISCONNECT

// -------------------------------------------------------------------

// C_LOGIN

// string id = 1;
inline void C_LOGIN::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& C_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.id)
}
inline std::string* C_LOGIN::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.id)
  return _internal_mutable_id();
}
inline const std::string& C_LOGIN::_internal_id() const {
  return id_.Get();
}
inline void C_LOGIN::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_LOGIN::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.id)
}

// string pw = 2;
inline void C_LOGIN::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& C_LOGIN::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.pw)
}
inline std::string* C_LOGIN::mutable_pw() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.pw)
  return _internal_mutable_pw();
}
inline const std::string& C_LOGIN::_internal_pw() const {
  return pw_.Get();
}
inline void C_LOGIN::_internal_set_pw(const std::string& value) {
  
  pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_pw() {
  
  return pw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.pw)
  return pw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_LOGIN::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pw,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.pw)
}

// -------------------------------------------------------------------

// S_LOGIN

// int32 bsuccess = 1;
inline void S_LOGIN::clear_bsuccess() {
  bsuccess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_LOGIN::_internal_bsuccess() const {
  return bsuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_LOGIN::bsuccess() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.bsuccess)
  return _internal_bsuccess();
}
inline void S_LOGIN::_internal_set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bsuccess_ = value;
}
inline void S_LOGIN::set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.bsuccess)
}

// string nickname = 2;
inline void S_LOGIN::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& S_LOGIN::nickname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LOGIN::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.nickname)
}
inline std::string* S_LOGIN::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& S_LOGIN::_internal_nickname() const {
  return nickname_.Get();
}
inline void S_LOGIN::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_LOGIN::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_LOGIN::release_nickname() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_LOGIN::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.nickname)
}

// int32 primid = 3;
inline void S_LOGIN::clear_primid() {
  primid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_LOGIN::_internal_primid() const {
  return primid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_LOGIN::primid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.primid)
  return _internal_primid();
}
inline void S_LOGIN::_internal_set_primid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  primid_ = value;
}
inline void S_LOGIN::set_primid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_primid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.primid)
}

// string friendcode = 4;
inline void S_LOGIN::clear_friendcode() {
  friendcode_.ClearToEmpty();
}
inline const std::string& S_LOGIN::friendcode() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.friendcode)
  return _internal_friendcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LOGIN::set_friendcode(ArgT0&& arg0, ArgT... args) {
 
 friendcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.friendcode)
}
inline std::string* S_LOGIN::mutable_friendcode() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.friendcode)
  return _internal_mutable_friendcode();
}
inline const std::string& S_LOGIN::_internal_friendcode() const {
  return friendcode_.Get();
}
inline void S_LOGIN::_internal_set_friendcode(const std::string& value) {
  
  friendcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_LOGIN::_internal_mutable_friendcode() {
  
  return friendcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_LOGIN::release_friendcode() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.friendcode)
  return friendcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_LOGIN::set_allocated_friendcode(std::string* friendcode) {
  if (friendcode != nullptr) {
    
  } else {
    
  }
  friendcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.friendcode)
}

// -------------------------------------------------------------------

// C_MAKEACCOUNT

// string id = 1;
inline void C_MAKEACCOUNT::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& C_MAKEACCOUNT::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MAKEACCOUNT.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_MAKEACCOUNT::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_MAKEACCOUNT.id)
}
inline std::string* C_MAKEACCOUNT::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_MAKEACCOUNT.id)
  return _internal_mutable_id();
}
inline const std::string& C_MAKEACCOUNT::_internal_id() const {
  return id_.Get();
}
inline void C_MAKEACCOUNT::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_MAKEACCOUNT::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_MAKEACCOUNT::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_MAKEACCOUNT.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_MAKEACCOUNT::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MAKEACCOUNT.id)
}

// string pw = 2;
inline void C_MAKEACCOUNT::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& C_MAKEACCOUNT::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MAKEACCOUNT.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_MAKEACCOUNT::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_MAKEACCOUNT.pw)
}
inline std::string* C_MAKEACCOUNT::mutable_pw() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_MAKEACCOUNT.pw)
  return _internal_mutable_pw();
}
inline const std::string& C_MAKEACCOUNT::_internal_pw() const {
  return pw_.Get();
}
inline void C_MAKEACCOUNT::_internal_set_pw(const std::string& value) {
  
  pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_MAKEACCOUNT::_internal_mutable_pw() {
  
  return pw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_MAKEACCOUNT::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.C_MAKEACCOUNT.pw)
  return pw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_MAKEACCOUNT::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pw,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MAKEACCOUNT.pw)
}

// string nickname = 3;
inline void C_MAKEACCOUNT::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& C_MAKEACCOUNT::nickname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MAKEACCOUNT.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_MAKEACCOUNT::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_MAKEACCOUNT.nickname)
}
inline std::string* C_MAKEACCOUNT::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_MAKEACCOUNT.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& C_MAKEACCOUNT::_internal_nickname() const {
  return nickname_.Get();
}
inline void C_MAKEACCOUNT::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_MAKEACCOUNT::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_MAKEACCOUNT::release_nickname() {
  // @@protoc_insertion_point(field_release:Protocol.C_MAKEACCOUNT.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_MAKEACCOUNT::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MAKEACCOUNT.nickname)
}

// string email = 4;
inline void C_MAKEACCOUNT::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& C_MAKEACCOUNT::email() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MAKEACCOUNT.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_MAKEACCOUNT::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_MAKEACCOUNT.email)
}
inline std::string* C_MAKEACCOUNT::mutable_email() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_MAKEACCOUNT.email)
  return _internal_mutable_email();
}
inline const std::string& C_MAKEACCOUNT::_internal_email() const {
  return email_.Get();
}
inline void C_MAKEACCOUNT::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_MAKEACCOUNT::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_MAKEACCOUNT::release_email() {
  // @@protoc_insertion_point(field_release:Protocol.C_MAKEACCOUNT.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_MAKEACCOUNT::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MAKEACCOUNT.email)
}

// -------------------------------------------------------------------

// S_MAKEACCOUNT

// int32 code = 1;
inline void S_MAKEACCOUNT::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MAKEACCOUNT::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MAKEACCOUNT::code() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MAKEACCOUNT.code)
  return _internal_code();
}
inline void S_MAKEACCOUNT::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void S_MAKEACCOUNT::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MAKEACCOUNT.code)
}

// -------------------------------------------------------------------

// C_RUDPACK

// int32 bhascount = 1;
inline void C_RUDPACK::clear_bhascount() {
  bhascount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_RUDPACK::_internal_bhascount() const {
  return bhascount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_RUDPACK::bhascount() const {
  // @@protoc_insertion_point(field_get:Protocol.C_RUDPACK.bhascount)
  return _internal_bhascount();
}
inline void C_RUDPACK::_internal_set_bhascount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bhascount_ = value;
}
inline void C_RUDPACK::set_bhascount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bhascount(value);
  // @@protoc_insertion_point(field_set:Protocol.C_RUDPACK.bhascount)
}

// int32 start = 2;
inline void C_RUDPACK::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_RUDPACK::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_RUDPACK::start() const {
  // @@protoc_insertion_point(field_get:Protocol.C_RUDPACK.start)
  return _internal_start();
}
inline void C_RUDPACK::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void C_RUDPACK::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:Protocol.C_RUDPACK.start)
}

// int32 count = 3;
inline void C_RUDPACK::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_RUDPACK::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_RUDPACK::count() const {
  // @@protoc_insertion_point(field_get:Protocol.C_RUDPACK.count)
  return _internal_count();
}
inline void C_RUDPACK::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void C_RUDPACK::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.C_RUDPACK.count)
}

// int32 playerid = 4;
inline void C_RUDPACK::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_RUDPACK::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_RUDPACK::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_RUDPACK.playerid)
  return _internal_playerid();
}
inline void C_RUDPACK::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void C_RUDPACK::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_RUDPACK.playerid)
}

// -------------------------------------------------------------------

// S_RUDPACK

// int32 bhascount = 1;
inline void S_RUDPACK::clear_bhascount() {
  bhascount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RUDPACK::_internal_bhascount() const {
  return bhascount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RUDPACK::bhascount() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RUDPACK.bhascount)
  return _internal_bhascount();
}
inline void S_RUDPACK::_internal_set_bhascount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bhascount_ = value;
}
inline void S_RUDPACK::set_bhascount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bhascount(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RUDPACK.bhascount)
}

// int32 start = 2;
inline void S_RUDPACK::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RUDPACK::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RUDPACK::start() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RUDPACK.start)
  return _internal_start();
}
inline void S_RUDPACK::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void S_RUDPACK::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RUDPACK.start)
}

// int32 count = 3;
inline void S_RUDPACK::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RUDPACK::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RUDPACK::count() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RUDPACK.count)
  return _internal_count();
}
inline void S_RUDPACK::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void S_RUDPACK::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RUDPACK.count)
}

// int32 playerid = 4;
inline void S_RUDPACK::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RUDPACK::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RUDPACK::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RUDPACK.playerid)
  return _internal_playerid();
}
inline void S_RUDPACK::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void S_RUDPACK::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RUDPACK.playerid)
}

// -------------------------------------------------------------------

// C_FINDACCOUNT

// string email = 1;
inline void C_FINDACCOUNT::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& C_FINDACCOUNT::email() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FINDACCOUNT.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_FINDACCOUNT::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_FINDACCOUNT.email)
}
inline std::string* C_FINDACCOUNT::mutable_email() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_FINDACCOUNT.email)
  return _internal_mutable_email();
}
inline const std::string& C_FINDACCOUNT::_internal_email() const {
  return email_.Get();
}
inline void C_FINDACCOUNT::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_FINDACCOUNT::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_FINDACCOUNT::release_email() {
  // @@protoc_insertion_point(field_release:Protocol.C_FINDACCOUNT.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_FINDACCOUNT::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_FINDACCOUNT.email)
}

// -------------------------------------------------------------------

// S_FINDACCOUNT

// int32 code = 1;
inline void S_FINDACCOUNT::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_FINDACCOUNT::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_FINDACCOUNT::code() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FINDACCOUNT.code)
  return _internal_code();
}
inline void S_FINDACCOUNT::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void S_FINDACCOUNT::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FINDACCOUNT.code)
}

// string id = 2;
inline void S_FINDACCOUNT::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& S_FINDACCOUNT::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FINDACCOUNT.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_FINDACCOUNT::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_FINDACCOUNT.id)
}
inline std::string* S_FINDACCOUNT::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_FINDACCOUNT.id)
  return _internal_mutable_id();
}
inline const std::string& S_FINDACCOUNT::_internal_id() const {
  return id_.Get();
}
inline void S_FINDACCOUNT::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_FINDACCOUNT::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_FINDACCOUNT::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_FINDACCOUNT.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_FINDACCOUNT::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FINDACCOUNT.id)
}

// -------------------------------------------------------------------

// C_REQUESTFRIEND

// string primid = 1;
inline void C_REQUESTFRIEND::clear_primid() {
  primid_.ClearToEmpty();
}
inline const std::string& C_REQUESTFRIEND::primid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_REQUESTFRIEND.primid)
  return _internal_primid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_REQUESTFRIEND::set_primid(ArgT0&& arg0, ArgT... args) {
 
 primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_REQUESTFRIEND.primid)
}
inline std::string* C_REQUESTFRIEND::mutable_primid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_REQUESTFRIEND.primid)
  return _internal_mutable_primid();
}
inline const std::string& C_REQUESTFRIEND::_internal_primid() const {
  return primid_.Get();
}
inline void C_REQUESTFRIEND::_internal_set_primid(const std::string& value) {
  
  primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_REQUESTFRIEND::_internal_mutable_primid() {
  
  return primid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_REQUESTFRIEND::release_primid() {
  // @@protoc_insertion_point(field_release:Protocol.C_REQUESTFRIEND.primid)
  return primid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_REQUESTFRIEND::set_allocated_primid(std::string* primid) {
  if (primid != nullptr) {
    
  } else {
    
  }
  primid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_REQUESTFRIEND.primid)
}

// string friendcode = 2;
inline void C_REQUESTFRIEND::clear_friendcode() {
  friendcode_.ClearToEmpty();
}
inline const std::string& C_REQUESTFRIEND::friendcode() const {
  // @@protoc_insertion_point(field_get:Protocol.C_REQUESTFRIEND.friendcode)
  return _internal_friendcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_REQUESTFRIEND::set_friendcode(ArgT0&& arg0, ArgT... args) {
 
 friendcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_REQUESTFRIEND.friendcode)
}
inline std::string* C_REQUESTFRIEND::mutable_friendcode() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_REQUESTFRIEND.friendcode)
  return _internal_mutable_friendcode();
}
inline const std::string& C_REQUESTFRIEND::_internal_friendcode() const {
  return friendcode_.Get();
}
inline void C_REQUESTFRIEND::_internal_set_friendcode(const std::string& value) {
  
  friendcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_REQUESTFRIEND::_internal_mutable_friendcode() {
  
  return friendcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_REQUESTFRIEND::release_friendcode() {
  // @@protoc_insertion_point(field_release:Protocol.C_REQUESTFRIEND.friendcode)
  return friendcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_REQUESTFRIEND::set_allocated_friendcode(std::string* friendcode) {
  if (friendcode != nullptr) {
    
  } else {
    
  }
  friendcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_REQUESTFRIEND.friendcode)
}

// -------------------------------------------------------------------

// S_REQUESTFRIEND

// int32 bsuccess = 1;
inline void S_REQUESTFRIEND::clear_bsuccess() {
  bsuccess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_REQUESTFRIEND::_internal_bsuccess() const {
  return bsuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_REQUESTFRIEND::bsuccess() const {
  // @@protoc_insertion_point(field_get:Protocol.S_REQUESTFRIEND.bsuccess)
  return _internal_bsuccess();
}
inline void S_REQUESTFRIEND::_internal_set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bsuccess_ = value;
}
inline void S_REQUESTFRIEND::set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:Protocol.S_REQUESTFRIEND.bsuccess)
}

// -------------------------------------------------------------------

// C_GETFRIENDREQUEST

// string primid = 1;
inline void C_GETFRIENDREQUEST::clear_primid() {
  primid_.ClearToEmpty();
}
inline const std::string& C_GETFRIENDREQUEST::primid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_GETFRIENDREQUEST.primid)
  return _internal_primid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_GETFRIENDREQUEST::set_primid(ArgT0&& arg0, ArgT... args) {
 
 primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_GETFRIENDREQUEST.primid)
}
inline std::string* C_GETFRIENDREQUEST::mutable_primid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_GETFRIENDREQUEST.primid)
  return _internal_mutable_primid();
}
inline const std::string& C_GETFRIENDREQUEST::_internal_primid() const {
  return primid_.Get();
}
inline void C_GETFRIENDREQUEST::_internal_set_primid(const std::string& value) {
  
  primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_GETFRIENDREQUEST::_internal_mutable_primid() {
  
  return primid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_GETFRIENDREQUEST::release_primid() {
  // @@protoc_insertion_point(field_release:Protocol.C_GETFRIENDREQUEST.primid)
  return primid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_GETFRIENDREQUEST::set_allocated_primid(std::string* primid) {
  if (primid != nullptr) {
    
  } else {
    
  }
  primid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_GETFRIENDREQUEST.primid)
}

// -------------------------------------------------------------------

// S_GETFRIENDREQUEST

// repeated .Protocol.Friend requests = 1;
inline int S_GETFRIENDREQUEST::_internal_requests_size() const {
  return requests_.size();
}
inline int S_GETFRIENDREQUEST::requests_size() const {
  return _internal_requests_size();
}
inline ::Protocol::Friend* S_GETFRIENDREQUEST::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_GETFRIENDREQUEST.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend >*
S_GETFRIENDREQUEST::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_GETFRIENDREQUEST.requests)
  return &requests_;
}
inline const ::Protocol::Friend& S_GETFRIENDREQUEST::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::Protocol::Friend& S_GETFRIENDREQUEST::requests(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_GETFRIENDREQUEST.requests)
  return _internal_requests(index);
}
inline ::Protocol::Friend* S_GETFRIENDREQUEST::_internal_add_requests() {
  return requests_.Add();
}
inline ::Protocol::Friend* S_GETFRIENDREQUEST::add_requests() {
  // @@protoc_insertion_point(field_add:Protocol.S_GETFRIENDREQUEST.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend >&
S_GETFRIENDREQUEST::requests() const {
  // @@protoc_insertion_point(field_list:Protocol.S_GETFRIENDREQUEST.requests)
  return requests_;
}

// -------------------------------------------------------------------

// C_REQUESTRESPONSE

// string primid = 1;
inline void C_REQUESTRESPONSE::clear_primid() {
  primid_.ClearToEmpty();
}
inline const std::string& C_REQUESTRESPONSE::primid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_REQUESTRESPONSE.primid)
  return _internal_primid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_REQUESTRESPONSE::set_primid(ArgT0&& arg0, ArgT... args) {
 
 primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_REQUESTRESPONSE.primid)
}
inline std::string* C_REQUESTRESPONSE::mutable_primid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_REQUESTRESPONSE.primid)
  return _internal_mutable_primid();
}
inline const std::string& C_REQUESTRESPONSE::_internal_primid() const {
  return primid_.Get();
}
inline void C_REQUESTRESPONSE::_internal_set_primid(const std::string& value) {
  
  primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_REQUESTRESPONSE::_internal_mutable_primid() {
  
  return primid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_REQUESTRESPONSE::release_primid() {
  // @@protoc_insertion_point(field_release:Protocol.C_REQUESTRESPONSE.primid)
  return primid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_REQUESTRESPONSE::set_allocated_primid(std::string* primid) {
  if (primid != nullptr) {
    
  } else {
    
  }
  primid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_REQUESTRESPONSE.primid)
}

// string fprimid = 2;
inline void C_REQUESTRESPONSE::clear_fprimid() {
  fprimid_.ClearToEmpty();
}
inline const std::string& C_REQUESTRESPONSE::fprimid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_REQUESTRESPONSE.fprimid)
  return _internal_fprimid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_REQUESTRESPONSE::set_fprimid(ArgT0&& arg0, ArgT... args) {
 
 fprimid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_REQUESTRESPONSE.fprimid)
}
inline std::string* C_REQUESTRESPONSE::mutable_fprimid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_REQUESTRESPONSE.fprimid)
  return _internal_mutable_fprimid();
}
inline const std::string& C_REQUESTRESPONSE::_internal_fprimid() const {
  return fprimid_.Get();
}
inline void C_REQUESTRESPONSE::_internal_set_fprimid(const std::string& value) {
  
  fprimid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_REQUESTRESPONSE::_internal_mutable_fprimid() {
  
  return fprimid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_REQUESTRESPONSE::release_fprimid() {
  // @@protoc_insertion_point(field_release:Protocol.C_REQUESTRESPONSE.fprimid)
  return fprimid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_REQUESTRESPONSE::set_allocated_fprimid(std::string* fprimid) {
  if (fprimid != nullptr) {
    
  } else {
    
  }
  fprimid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fprimid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_REQUESTRESPONSE.fprimid)
}

// int32 response = 3;
inline void C_REQUESTRESPONSE::clear_response() {
  response_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_REQUESTRESPONSE::_internal_response() const {
  return response_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_REQUESTRESPONSE::response() const {
  // @@protoc_insertion_point(field_get:Protocol.C_REQUESTRESPONSE.response)
  return _internal_response();
}
inline void C_REQUESTRESPONSE::_internal_set_response(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  response_ = value;
}
inline void C_REQUESTRESPONSE::set_response(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:Protocol.C_REQUESTRESPONSE.response)
}

// int32 listindex = 4;
inline void C_REQUESTRESPONSE::clear_listindex() {
  listindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_REQUESTRESPONSE::_internal_listindex() const {
  return listindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_REQUESTRESPONSE::listindex() const {
  // @@protoc_insertion_point(field_get:Protocol.C_REQUESTRESPONSE.listindex)
  return _internal_listindex();
}
inline void C_REQUESTRESPONSE::_internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listindex_ = value;
}
inline void C_REQUESTRESPONSE::set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listindex(value);
  // @@protoc_insertion_point(field_set:Protocol.C_REQUESTRESPONSE.listindex)
}

// -------------------------------------------------------------------

// S_REQUESTRESPONSE

// int32 bsuccess = 1;
inline void S_REQUESTRESPONSE::clear_bsuccess() {
  bsuccess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_REQUESTRESPONSE::_internal_bsuccess() const {
  return bsuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_REQUESTRESPONSE::bsuccess() const {
  // @@protoc_insertion_point(field_get:Protocol.S_REQUESTRESPONSE.bsuccess)
  return _internal_bsuccess();
}
inline void S_REQUESTRESPONSE::_internal_set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bsuccess_ = value;
}
inline void S_REQUESTRESPONSE::set_bsuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:Protocol.S_REQUESTRESPONSE.bsuccess)
}

// int32 listindex = 2;
inline void S_REQUESTRESPONSE::clear_listindex() {
  listindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_REQUESTRESPONSE::_internal_listindex() const {
  return listindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_REQUESTRESPONSE::listindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_REQUESTRESPONSE.listindex)
  return _internal_listindex();
}
inline void S_REQUESTRESPONSE::_internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listindex_ = value;
}
inline void S_REQUESTRESPONSE::set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_REQUESTRESPONSE.listindex)
}

// -------------------------------------------------------------------

// C_GETFRIENDS

// string primid = 1;
inline void C_GETFRIENDS::clear_primid() {
  primid_.ClearToEmpty();
}
inline const std::string& C_GETFRIENDS::primid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_GETFRIENDS.primid)
  return _internal_primid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_GETFRIENDS::set_primid(ArgT0&& arg0, ArgT... args) {
 
 primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_GETFRIENDS.primid)
}
inline std::string* C_GETFRIENDS::mutable_primid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_GETFRIENDS.primid)
  return _internal_mutable_primid();
}
inline const std::string& C_GETFRIENDS::_internal_primid() const {
  return primid_.Get();
}
inline void C_GETFRIENDS::_internal_set_primid(const std::string& value) {
  
  primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_GETFRIENDS::_internal_mutable_primid() {
  
  return primid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_GETFRIENDS::release_primid() {
  // @@protoc_insertion_point(field_release:Protocol.C_GETFRIENDS.primid)
  return primid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_GETFRIENDS::set_allocated_primid(std::string* primid) {
  if (primid != nullptr) {
    
  } else {
    
  }
  primid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_GETFRIENDS.primid)
}

// -------------------------------------------------------------------

// S_GETFRIENDS

// repeated .Protocol.Friend friends = 5;
inline int S_GETFRIENDS::_internal_friends_size() const {
  return friends_.size();
}
inline int S_GETFRIENDS::friends_size() const {
  return _internal_friends_size();
}
inline ::Protocol::Friend* S_GETFRIENDS::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_GETFRIENDS.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend >*
S_GETFRIENDS::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_GETFRIENDS.friends)
  return &friends_;
}
inline const ::Protocol::Friend& S_GETFRIENDS::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::Protocol::Friend& S_GETFRIENDS::friends(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_GETFRIENDS.friends)
  return _internal_friends(index);
}
inline ::Protocol::Friend* S_GETFRIENDS::_internal_add_friends() {
  return friends_.Add();
}
inline ::Protocol::Friend* S_GETFRIENDS::add_friends() {
  // @@protoc_insertion_point(field_add:Protocol.S_GETFRIENDS.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Friend >&
S_GETFRIENDS::friends() const {
  // @@protoc_insertion_point(field_list:Protocol.S_GETFRIENDS.friends)
  return friends_;
}

// -------------------------------------------------------------------

// C_SENDMSG

// string from_id = 1;
inline void C_SENDMSG::clear_from_id() {
  from_id_.ClearToEmpty();
}
inline const std::string& C_SENDMSG::from_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SENDMSG.from_id)
  return _internal_from_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SENDMSG::set_from_id(ArgT0&& arg0, ArgT... args) {
 
 from_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SENDMSG.from_id)
}
inline std::string* C_SENDMSG::mutable_from_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SENDMSG.from_id)
  return _internal_mutable_from_id();
}
inline const std::string& C_SENDMSG::_internal_from_id() const {
  return from_id_.Get();
}
inline void C_SENDMSG::_internal_set_from_id(const std::string& value) {
  
  from_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SENDMSG::_internal_mutable_from_id() {
  
  return from_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SENDMSG::release_from_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_SENDMSG.from_id)
  return from_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SENDMSG::set_allocated_from_id(std::string* from_id) {
  if (from_id != nullptr) {
    
  } else {
    
  }
  from_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SENDMSG.from_id)
}

// string to_id = 2;
inline void C_SENDMSG::clear_to_id() {
  to_id_.ClearToEmpty();
}
inline const std::string& C_SENDMSG::to_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SENDMSG.to_id)
  return _internal_to_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SENDMSG::set_to_id(ArgT0&& arg0, ArgT... args) {
 
 to_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SENDMSG.to_id)
}
inline std::string* C_SENDMSG::mutable_to_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SENDMSG.to_id)
  return _internal_mutable_to_id();
}
inline const std::string& C_SENDMSG::_internal_to_id() const {
  return to_id_.Get();
}
inline void C_SENDMSG::_internal_set_to_id(const std::string& value) {
  
  to_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SENDMSG::_internal_mutable_to_id() {
  
  return to_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SENDMSG::release_to_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_SENDMSG.to_id)
  return to_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SENDMSG::set_allocated_to_id(std::string* to_id) {
  if (to_id != nullptr) {
    
  } else {
    
  }
  to_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SENDMSG.to_id)
}

// string msg = 3;
inline void C_SENDMSG::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& C_SENDMSG::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SENDMSG.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SENDMSG::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SENDMSG.msg)
}
inline std::string* C_SENDMSG::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SENDMSG.msg)
  return _internal_mutable_msg();
}
inline const std::string& C_SENDMSG::_internal_msg() const {
  return msg_.Get();
}
inline void C_SENDMSG::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SENDMSG::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SENDMSG::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_SENDMSG.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SENDMSG::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SENDMSG.msg)
}

// int32 listindex = 4;
inline void C_SENDMSG::clear_listindex() {
  listindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_SENDMSG::_internal_listindex() const {
  return listindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_SENDMSG::listindex() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SENDMSG.listindex)
  return _internal_listindex();
}
inline void C_SENDMSG::_internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listindex_ = value;
}
inline void C_SENDMSG::set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listindex(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SENDMSG.listindex)
}

// -------------------------------------------------------------------

// S_SENDMSG

// string from_id = 1;
inline void S_SENDMSG::clear_from_id() {
  from_id_.ClearToEmpty();
}
inline const std::string& S_SENDMSG::from_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SENDMSG.from_id)
  return _internal_from_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SENDMSG::set_from_id(ArgT0&& arg0, ArgT... args) {
 
 from_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SENDMSG.from_id)
}
inline std::string* S_SENDMSG::mutable_from_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SENDMSG.from_id)
  return _internal_mutable_from_id();
}
inline const std::string& S_SENDMSG::_internal_from_id() const {
  return from_id_.Get();
}
inline void S_SENDMSG::_internal_set_from_id(const std::string& value) {
  
  from_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_SENDMSG::_internal_mutable_from_id() {
  
  return from_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_SENDMSG::release_from_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_SENDMSG.from_id)
  return from_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_SENDMSG::set_allocated_from_id(std::string* from_id) {
  if (from_id != nullptr) {
    
  } else {
    
  }
  from_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SENDMSG.from_id)
}

// string to_id = 2;
inline void S_SENDMSG::clear_to_id() {
  to_id_.ClearToEmpty();
}
inline const std::string& S_SENDMSG::to_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SENDMSG.to_id)
  return _internal_to_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SENDMSG::set_to_id(ArgT0&& arg0, ArgT... args) {
 
 to_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SENDMSG.to_id)
}
inline std::string* S_SENDMSG::mutable_to_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SENDMSG.to_id)
  return _internal_mutable_to_id();
}
inline const std::string& S_SENDMSG::_internal_to_id() const {
  return to_id_.Get();
}
inline void S_SENDMSG::_internal_set_to_id(const std::string& value) {
  
  to_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_SENDMSG::_internal_mutable_to_id() {
  
  return to_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_SENDMSG::release_to_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_SENDMSG.to_id)
  return to_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_SENDMSG::set_allocated_to_id(std::string* to_id) {
  if (to_id != nullptr) {
    
  } else {
    
  }
  to_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SENDMSG.to_id)
}

// string msg = 3;
inline void S_SENDMSG::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& S_SENDMSG::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SENDMSG.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SENDMSG::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SENDMSG.msg)
}
inline std::string* S_SENDMSG::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SENDMSG.msg)
  return _internal_mutable_msg();
}
inline const std::string& S_SENDMSG::_internal_msg() const {
  return msg_.Get();
}
inline void S_SENDMSG::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_SENDMSG::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_SENDMSG::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_SENDMSG.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_SENDMSG::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SENDMSG.msg)
}

// int32 listindex = 4;
inline void S_SENDMSG::clear_listindex() {
  listindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SENDMSG::_internal_listindex() const {
  return listindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SENDMSG::listindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SENDMSG.listindex)
  return _internal_listindex();
}
inline void S_SENDMSG::_internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listindex_ = value;
}
inline void S_SENDMSG::set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SENDMSG.listindex)
}

// -------------------------------------------------------------------

// C_GETCHATLOG

// string primid = 1;
inline void C_GETCHATLOG::clear_primid() {
  primid_.ClearToEmpty();
}
inline const std::string& C_GETCHATLOG::primid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_GETCHATLOG.primid)
  return _internal_primid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_GETCHATLOG::set_primid(ArgT0&& arg0, ArgT... args) {
 
 primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_GETCHATLOG.primid)
}
inline std::string* C_GETCHATLOG::mutable_primid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_GETCHATLOG.primid)
  return _internal_mutable_primid();
}
inline const std::string& C_GETCHATLOG::_internal_primid() const {
  return primid_.Get();
}
inline void C_GETCHATLOG::_internal_set_primid(const std::string& value) {
  
  primid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_GETCHATLOG::_internal_mutable_primid() {
  
  return primid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_GETCHATLOG::release_primid() {
  // @@protoc_insertion_point(field_release:Protocol.C_GETCHATLOG.primid)
  return primid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_GETCHATLOG::set_allocated_primid(std::string* primid) {
  if (primid != nullptr) {
    
  } else {
    
  }
  primid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_GETCHATLOG.primid)
}

// string to_id = 2;
inline void C_GETCHATLOG::clear_to_id() {
  to_id_.ClearToEmpty();
}
inline const std::string& C_GETCHATLOG::to_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_GETCHATLOG.to_id)
  return _internal_to_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_GETCHATLOG::set_to_id(ArgT0&& arg0, ArgT... args) {
 
 to_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_GETCHATLOG.to_id)
}
inline std::string* C_GETCHATLOG::mutable_to_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_GETCHATLOG.to_id)
  return _internal_mutable_to_id();
}
inline const std::string& C_GETCHATLOG::_internal_to_id() const {
  return to_id_.Get();
}
inline void C_GETCHATLOG::_internal_set_to_id(const std::string& value) {
  
  to_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_GETCHATLOG::_internal_mutable_to_id() {
  
  return to_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_GETCHATLOG::release_to_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_GETCHATLOG.to_id)
  return to_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_GETCHATLOG::set_allocated_to_id(std::string* to_id) {
  if (to_id != nullptr) {
    
  } else {
    
  }
  to_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_GETCHATLOG.to_id)
}

// int32 listindex = 3;
inline void C_GETCHATLOG::clear_listindex() {
  listindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_GETCHATLOG::_internal_listindex() const {
  return listindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_GETCHATLOG::listindex() const {
  // @@protoc_insertion_point(field_get:Protocol.C_GETCHATLOG.listindex)
  return _internal_listindex();
}
inline void C_GETCHATLOG::_internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listindex_ = value;
}
inline void C_GETCHATLOG::set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listindex(value);
  // @@protoc_insertion_point(field_set:Protocol.C_GETCHATLOG.listindex)
}

// -------------------------------------------------------------------

// S_GETCHATLOG

// int32 listindex = 1;
inline void S_GETCHATLOG::clear_listindex() {
  listindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_GETCHATLOG::_internal_listindex() const {
  return listindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_GETCHATLOG::listindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GETCHATLOG.listindex)
  return _internal_listindex();
}
inline void S_GETCHATLOG::_internal_set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listindex_ = value;
}
inline void S_GETCHATLOG::set_listindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GETCHATLOG.listindex)
}

// repeated .Protocol.ChatLog logs = 2;
inline int S_GETCHATLOG::_internal_logs_size() const {
  return logs_.size();
}
inline int S_GETCHATLOG::logs_size() const {
  return _internal_logs_size();
}
inline ::Protocol::ChatLog* S_GETCHATLOG::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_GETCHATLOG.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatLog >*
S_GETCHATLOG::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_GETCHATLOG.logs)
  return &logs_;
}
inline const ::Protocol::ChatLog& S_GETCHATLOG::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::Protocol::ChatLog& S_GETCHATLOG::logs(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_GETCHATLOG.logs)
  return _internal_logs(index);
}
inline ::Protocol::ChatLog* S_GETCHATLOG::_internal_add_logs() {
  return logs_.Add();
}
inline ::Protocol::ChatLog* S_GETCHATLOG::add_logs() {
  // @@protoc_insertion_point(field_add:Protocol.S_GETCHATLOG.logs)
  return _internal_add_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatLog >&
S_GETCHATLOG::logs() const {
  // @@protoc_insertion_point(field_list:Protocol.S_GETCHATLOG.logs)
  return logs_;
}

// -------------------------------------------------------------------

// C_SHAREPUBLICKEY

// int32 primid = 1;
inline void C_SHAREPUBLICKEY::clear_primid() {
  primid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_SHAREPUBLICKEY::_internal_primid() const {
  return primid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_SHAREPUBLICKEY::primid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHAREPUBLICKEY.primid)
  return _internal_primid();
}
inline void C_SHAREPUBLICKEY::_internal_set_primid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  primid_ = value;
}
inline void C_SHAREPUBLICKEY::set_primid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_primid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SHAREPUBLICKEY.primid)
}

// bytes publickey = 2;
inline void C_SHAREPUBLICKEY::clear_publickey() {
  publickey_.ClearToEmpty();
}
inline const std::string& C_SHAREPUBLICKEY::publickey() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHAREPUBLICKEY.publickey)
  return _internal_publickey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SHAREPUBLICKEY::set_publickey(ArgT0&& arg0, ArgT... args) {
 
 publickey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SHAREPUBLICKEY.publickey)
}
inline std::string* C_SHAREPUBLICKEY::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SHAREPUBLICKEY.publickey)
  return _internal_mutable_publickey();
}
inline const std::string& C_SHAREPUBLICKEY::_internal_publickey() const {
  return publickey_.Get();
}
inline void C_SHAREPUBLICKEY::_internal_set_publickey(const std::string& value) {
  
  publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SHAREPUBLICKEY::_internal_mutable_publickey() {
  
  return publickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SHAREPUBLICKEY::release_publickey() {
  // @@protoc_insertion_point(field_release:Protocol.C_SHAREPUBLICKEY.publickey)
  return publickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SHAREPUBLICKEY::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SHAREPUBLICKEY.publickey)
}

// -------------------------------------------------------------------

// S_SHAREPUBLICKEY

// bytes publickey = 1;
inline void S_SHAREPUBLICKEY::clear_publickey() {
  publickey_.ClearToEmpty();
}
inline const std::string& S_SHAREPUBLICKEY::publickey() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHAREPUBLICKEY.publickey)
  return _internal_publickey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SHAREPUBLICKEY::set_publickey(ArgT0&& arg0, ArgT... args) {
 
 publickey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SHAREPUBLICKEY.publickey)
}
inline std::string* S_SHAREPUBLICKEY::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SHAREPUBLICKEY.publickey)
  return _internal_mutable_publickey();
}
inline const std::string& S_SHAREPUBLICKEY::_internal_publickey() const {
  return publickey_.Get();
}
inline void S_SHAREPUBLICKEY::_internal_set_publickey(const std::string& value) {
  
  publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_SHAREPUBLICKEY::_internal_mutable_publickey() {
  
  return publickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_SHAREPUBLICKEY::release_publickey() {
  // @@protoc_insertion_point(field_release:Protocol.S_SHAREPUBLICKEY.publickey)
  return publickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_SHAREPUBLICKEY::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SHAREPUBLICKEY.publickey)
}

// -------------------------------------------------------------------

// C_KEYREADY

// int32 bready = 1;
inline void C_KEYREADY::clear_bready() {
  bready_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_KEYREADY::_internal_bready() const {
  return bready_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_KEYREADY::bready() const {
  // @@protoc_insertion_point(field_get:Protocol.C_KEYREADY.bready)
  return _internal_bready();
}
inline void C_KEYREADY::_internal_set_bready(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bready_ = value;
}
inline void C_KEYREADY::set_bready(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bready(value);
  // @@protoc_insertion_point(field_set:Protocol.C_KEYREADY.bready)
}

// int32 primid = 2;
inline void C_KEYREADY::clear_primid() {
  primid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_KEYREADY::_internal_primid() const {
  return primid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_KEYREADY::primid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_KEYREADY.primid)
  return _internal_primid();
}
inline void C_KEYREADY::_internal_set_primid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  primid_ = value;
}
inline void C_KEYREADY::set_primid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_primid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_KEYREADY.primid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
