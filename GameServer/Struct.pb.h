// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class Friend;
struct FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class MoveList;
struct MoveListDefaultTypeInternal;
extern MoveListDefaultTypeInternal _MoveList_default_instance_;
class MoveTeam;
struct MoveTeamDefaultTypeInternal;
extern MoveTeamDefaultTypeInternal _MoveTeam_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerMove;
struct PlayerMoveDefaultTypeInternal;
extern PlayerMoveDefaultTypeInternal _PlayerMove_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class Velocity;
struct VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::Friend* Arena::CreateMaybeMessage<::Protocol::Friend>(Arena*);
template<> ::Protocol::MoveList* Arena::CreateMaybeMessage<::Protocol::MoveList>(Arena*);
template<> ::Protocol::MoveTeam* Arena::CreateMaybeMessage<::Protocol::MoveTeam>(Arena*);
template<> ::Protocol::Player* Arena::CreateMaybeMessage<::Protocol::Player>(Arena*);
template<> ::Protocol::PlayerMove* Arena::CreateMaybeMessage<::Protocol::PlayerMove>(Arena*);
template<> ::Protocol::Position* Arena::CreateMaybeMessage<::Protocol::Position>(Arena*);
template<> ::Protocol::Rotation* Arena::CreateMaybeMessage<::Protocol::Rotation>(Arena*);
template<> ::Protocol::Velocity* Arena::CreateMaybeMessage<::Protocol::Velocity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Friend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Friend) */ {
 public:
  inline Friend() : Friend(nullptr) {}
  ~Friend() override;
  explicit constexpr Friend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Friend(const Friend& from);
  Friend(Friend&& from) noexcept
    : Friend() {
    *this = ::std::move(from);
  }

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Friend& operator=(Friend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Friend& default_instance() {
    return *internal_default_instance();
  }
  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
               &_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Friend& a, Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(Friend* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Friend* New() const final {
    return new Friend();
  }

  Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Friend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Friend";
  }
  protected:
  explicit Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kBonlineFieldNumber = 2,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 bonline = 2;
  void clear_bonline();
  ::PROTOBUF_NAMESPACE_ID::int32 bonline() const;
  void set_bonline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bonline() const;
  void _internal_set_bonline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 bonline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return new Player();
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kRoomidFieldNumber = 2,
    kRoomlistidFieldNumber = 3,
    kTeamnumFieldNumber = 4,
  };
  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomid = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomlistid = 3;
  void clear_roomlistid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomlistid() const;
  void set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomlistid() const;
  void _internal_set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 teamnum = 4;
  void clear_teamnum();
  ::PROTOBUF_NAMESPACE_ID::int32 teamnum() const;
  void set_teamnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teamnum() const;
  void _internal_set_teamnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomlistid_;
  ::PROTOBUF_NAMESPACE_ID::int32 teamnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return new Position();
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Rotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Rotation) */ {
 public:
  inline Rotation() : Rotation(nullptr) {}
  ~Rotation() override;
  explicit constexpr Rotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rotation(const Rotation& from);
  Rotation(Rotation&& from) noexcept
    : Rotation() {
    *this = ::std::move(from);
  }

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotation& operator=(Rotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
               &_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rotation& a, Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rotation* New() const final {
    return new Rotation();
  }

  Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rotation& from);
  void MergeFrom(const Rotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Rotation";
  }
  protected:
  explicit Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // float yaw = 1;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float roll = 3;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Rotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float yaw_;
  float pitch_;
  float roll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Velocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Velocity) */ {
 public:
  inline Velocity() : Velocity(nullptr) {}
  ~Velocity() override;
  explicit constexpr Velocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Velocity(const Velocity& from);
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Velocity& operator=(Velocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Velocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Velocity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Velocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const final {
    return new Velocity();
  }

  Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Velocity";
  }
  protected:
  explicit Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVxFieldNumber = 1,
    kVyFieldNumber = 2,
    kVzFieldNumber = 3,
  };
  // float vx = 1;
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // float vy = 2;
  void clear_vy();
  float vy() const;
  void set_vy(float value);
  private:
  float _internal_vy() const;
  void _internal_set_vy(float value);
  public:

  // float vz = 3;
  void clear_vz();
  float vz() const;
  void set_vz(float value);
  private:
  float _internal_vz() const;
  void _internal_set_vz(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Velocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float vx_;
  float vy_;
  float vz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MoveList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MoveList) */ {
 public:
  inline MoveList() : MoveList(nullptr) {}
  ~MoveList() override;
  explicit constexpr MoveList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveList(const MoveList& from);
  MoveList(MoveList&& from) noexcept
    : MoveList() {
    *this = ::std::move(from);
  }

  inline MoveList& operator=(const MoveList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveList& operator=(MoveList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveList* internal_default_instance() {
    return reinterpret_cast<const MoveList*>(
               &_MoveList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MoveList& a, MoveList& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveList* New() const final {
    return new MoveList();
  }

  MoveList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveList& from);
  void MergeFrom(const MoveList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MoveList";
  }
  protected:
  explicit MoveList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomprimeidFieldNumber = 1,
    kRoomlistidFieldNumber = 2,
    kMovetolistidFieldNumber = 3,
    kMoveteamnumFieldNumber = 4,
  };
  // int32 roomprimeid = 1;
  void clear_roomprimeid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomprimeid() const;
  void set_roomprimeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomprimeid() const;
  void _internal_set_roomprimeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomlistid = 2;
  void clear_roomlistid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomlistid() const;
  void set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomlistid() const;
  void _internal_set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 movetolistid = 3;
  void clear_movetolistid();
  ::PROTOBUF_NAMESPACE_ID::int32 movetolistid() const;
  void set_movetolistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_movetolistid() const;
  void _internal_set_movetolistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 moveteamnum = 4;
  void clear_moveteamnum();
  ::PROTOBUF_NAMESPACE_ID::int32 moveteamnum() const;
  void set_moveteamnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moveteamnum() const;
  void _internal_set_moveteamnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MoveList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomprimeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomlistid_;
  ::PROTOBUF_NAMESPACE_ID::int32 movetolistid_;
  ::PROTOBUF_NAMESPACE_ID::int32 moveteamnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MoveTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MoveTeam) */ {
 public:
  inline MoveTeam() : MoveTeam(nullptr) {}
  ~MoveTeam() override;
  explicit constexpr MoveTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveTeam(const MoveTeam& from);
  MoveTeam(MoveTeam&& from) noexcept
    : MoveTeam() {
    *this = ::std::move(from);
  }

  inline MoveTeam& operator=(const MoveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveTeam& operator=(MoveTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveTeam* internal_default_instance() {
    return reinterpret_cast<const MoveTeam*>(
               &_MoveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MoveTeam& a, MoveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveTeam* New() const final {
    return new MoveTeam();
  }

  MoveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveTeam& from);
  void MergeFrom(const MoveTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MoveTeam";
  }
  protected:
  explicit MoveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveteamnumFieldNumber = 1,
    kRoomprimeidFieldNumber = 2,
    kRoomlistidFieldNumber = 3,
    kMovetolistidFieldNumber = 4,
  };
  // int32 moveteamnum = 1;
  void clear_moveteamnum();
  ::PROTOBUF_NAMESPACE_ID::int32 moveteamnum() const;
  void set_moveteamnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moveteamnum() const;
  void _internal_set_moveteamnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomprimeid = 2;
  void clear_roomprimeid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomprimeid() const;
  void set_roomprimeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomprimeid() const;
  void _internal_set_roomprimeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomlistid = 3;
  void clear_roomlistid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomlistid() const;
  void set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomlistid() const;
  void _internal_set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 movetolistid = 4;
  void clear_movetolistid();
  ::PROTOBUF_NAMESPACE_ID::int32 movetolistid() const;
  void set_movetolistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_movetolistid() const;
  void _internal_set_movetolistid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MoveTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 moveteamnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomprimeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomlistid_;
  ::PROTOBUF_NAMESPACE_ID::int32 movetolistid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerMove) */ {
 public:
  inline PlayerMove() : PlayerMove(nullptr) {}
  ~PlayerMove() override;
  explicit constexpr PlayerMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMove(const PlayerMove& from);
  PlayerMove(PlayerMove&& from) noexcept
    : PlayerMove() {
    *this = ::std::move(from);
  }

  inline PlayerMove& operator=(const PlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMove& operator=(PlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMove* internal_default_instance() {
    return reinterpret_cast<const PlayerMove*>(
               &_PlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerMove& a, PlayerMove& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMove* New() const final {
    return new PlayerMove();
  }

  PlayerMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerMove& from);
  void MergeFrom(const PlayerMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerMove";
  }
  protected:
  explicit PlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kRotFieldNumber = 4,
    kVelFieldNumber = 5,
    kRoomidFieldNumber = 1,
    kPrimidFieldNumber = 2,
  };
  // .Protocol.Position pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Protocol::Position& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Position* release_pos();
  ::Protocol::Position* mutable_pos();
  void set_allocated_pos(::Protocol::Position* pos);
  private:
  const ::Protocol::Position& _internal_pos() const;
  ::Protocol::Position* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Protocol::Position* pos);
  ::Protocol::Position* unsafe_arena_release_pos();

  // .Protocol.Rotation rot = 4;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  const ::Protocol::Rotation& rot() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Rotation* release_rot();
  ::Protocol::Rotation* mutable_rot();
  void set_allocated_rot(::Protocol::Rotation* rot);
  private:
  const ::Protocol::Rotation& _internal_rot() const;
  ::Protocol::Rotation* _internal_mutable_rot();
  public:
  void unsafe_arena_set_allocated_rot(
      ::Protocol::Rotation* rot);
  ::Protocol::Rotation* unsafe_arena_release_rot();

  // .Protocol.Velocity vel = 5;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Protocol::Velocity& vel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Velocity* release_vel();
  ::Protocol::Velocity* mutable_vel();
  void set_allocated_vel(::Protocol::Velocity* vel);
  private:
  const ::Protocol::Velocity& _internal_vel() const;
  ::Protocol::Velocity* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::Protocol::Velocity* vel);
  ::Protocol::Velocity* unsafe_arena_release_vel();

  // int32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 primid = 2;
  void clear_primid();
  ::PROTOBUF_NAMESPACE_ID::int32 primid() const;
  void set_primid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_primid() const;
  void _internal_set_primid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Position* pos_;
  ::Protocol::Rotation* rot_;
  ::Protocol::Velocity* vel_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 primid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Friend

// string nickname = 1;
inline void Friend::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& Friend::nickname() const {
  // @@protoc_insertion_point(field_get:Protocol.Friend.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Friend::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Friend.nickname)
}
inline std::string* Friend::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.Friend.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Friend::_internal_nickname() const {
  return nickname_.Get();
}
inline void Friend::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Friend::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Friend::release_nickname() {
  // @@protoc_insertion_point(field_release:Protocol.Friend.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Friend::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.Friend.nickname)
}

// int32 bonline = 2;
inline void Friend::clear_bonline() {
  bonline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Friend::_internal_bonline() const {
  return bonline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Friend::bonline() const {
  // @@protoc_insertion_point(field_get:Protocol.Friend.bonline)
  return _internal_bonline();
}
inline void Friend::_internal_set_bonline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bonline_ = value;
}
inline void Friend::set_bonline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bonline(value);
  // @@protoc_insertion_point(field_set:Protocol.Friend.bonline)
}

// -------------------------------------------------------------------

// Player

// int32 id = 1;
inline void Player::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::id() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.id)
}

// int32 roomid = 2;
inline void Player::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.roomid)
  return _internal_roomid();
}
inline void Player::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void Player::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.roomid)
}

// int32 roomlistid = 3;
inline void Player::clear_roomlistid() {
  roomlistid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_roomlistid() const {
  return roomlistid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::roomlistid() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.roomlistid)
  return _internal_roomlistid();
}
inline void Player::_internal_set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomlistid_ = value;
}
inline void Player::set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomlistid(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.roomlistid)
}

// int32 teamnum = 4;
inline void Player::clear_teamnum() {
  teamnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_teamnum() const {
  return teamnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::teamnum() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.teamnum)
  return _internal_teamnum();
}
inline void Player::_internal_set_teamnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  teamnum_ = value;
}
inline void Player::set_teamnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teamnum(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.teamnum)
}

// string name = 5;
inline void Player::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Player.name)
}
inline std::string* Player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.Player.name)
  return _internal_mutable_name();
}
inline const std::string& Player::_internal_name() const {
  return name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Player.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.Player.name)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::_internal_x() const {
  return x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::_internal_y() const {
  return y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::_internal_z() const {
  return z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Position.z)
}

// -------------------------------------------------------------------

// Rotation

// float yaw = 1;
inline void Rotation::clear_yaw() {
  yaw_ = 0;
}
inline float Rotation::_internal_yaw() const {
  return yaw_;
}
inline float Rotation::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.Rotation.yaw)
  return _internal_yaw();
}
inline void Rotation::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void Rotation::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.Rotation.yaw)
}

// float pitch = 2;
inline void Rotation::clear_pitch() {
  pitch_ = 0;
}
inline float Rotation::_internal_pitch() const {
  return pitch_;
}
inline float Rotation::pitch() const {
  // @@protoc_insertion_point(field_get:Protocol.Rotation.pitch)
  return _internal_pitch();
}
inline void Rotation::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void Rotation::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Protocol.Rotation.pitch)
}

// float roll = 3;
inline void Rotation::clear_roll() {
  roll_ = 0;
}
inline float Rotation::_internal_roll() const {
  return roll_;
}
inline float Rotation::roll() const {
  // @@protoc_insertion_point(field_get:Protocol.Rotation.roll)
  return _internal_roll();
}
inline void Rotation::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void Rotation::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Protocol.Rotation.roll)
}

// -------------------------------------------------------------------

// Velocity

// float vx = 1;
inline void Velocity::clear_vx() {
  vx_ = 0;
}
inline float Velocity::_internal_vx() const {
  return vx_;
}
inline float Velocity::vx() const {
  // @@protoc_insertion_point(field_get:Protocol.Velocity.vx)
  return _internal_vx();
}
inline void Velocity::_internal_set_vx(float value) {
  
  vx_ = value;
}
inline void Velocity::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:Protocol.Velocity.vx)
}

// float vy = 2;
inline void Velocity::clear_vy() {
  vy_ = 0;
}
inline float Velocity::_internal_vy() const {
  return vy_;
}
inline float Velocity::vy() const {
  // @@protoc_insertion_point(field_get:Protocol.Velocity.vy)
  return _internal_vy();
}
inline void Velocity::_internal_set_vy(float value) {
  
  vy_ = value;
}
inline void Velocity::set_vy(float value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:Protocol.Velocity.vy)
}

// float vz = 3;
inline void Velocity::clear_vz() {
  vz_ = 0;
}
inline float Velocity::_internal_vz() const {
  return vz_;
}
inline float Velocity::vz() const {
  // @@protoc_insertion_point(field_get:Protocol.Velocity.vz)
  return _internal_vz();
}
inline void Velocity::_internal_set_vz(float value) {
  
  vz_ = value;
}
inline void Velocity::set_vz(float value) {
  _internal_set_vz(value);
  // @@protoc_insertion_point(field_set:Protocol.Velocity.vz)
}

// -------------------------------------------------------------------

// MoveList

// int32 roomprimeid = 1;
inline void MoveList::clear_roomprimeid() {
  roomprimeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveList::_internal_roomprimeid() const {
  return roomprimeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveList::roomprimeid() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveList.roomprimeid)
  return _internal_roomprimeid();
}
inline void MoveList::_internal_set_roomprimeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomprimeid_ = value;
}
inline void MoveList::set_roomprimeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomprimeid(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveList.roomprimeid)
}

// int32 roomlistid = 2;
inline void MoveList::clear_roomlistid() {
  roomlistid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveList::_internal_roomlistid() const {
  return roomlistid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveList::roomlistid() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveList.roomlistid)
  return _internal_roomlistid();
}
inline void MoveList::_internal_set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomlistid_ = value;
}
inline void MoveList::set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomlistid(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveList.roomlistid)
}

// int32 movetolistid = 3;
inline void MoveList::clear_movetolistid() {
  movetolistid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveList::_internal_movetolistid() const {
  return movetolistid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveList::movetolistid() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveList.movetolistid)
  return _internal_movetolistid();
}
inline void MoveList::_internal_set_movetolistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  movetolistid_ = value;
}
inline void MoveList::set_movetolistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_movetolistid(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveList.movetolistid)
}

// int32 moveteamnum = 4;
inline void MoveList::clear_moveteamnum() {
  moveteamnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveList::_internal_moveteamnum() const {
  return moveteamnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveList::moveteamnum() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveList.moveteamnum)
  return _internal_moveteamnum();
}
inline void MoveList::_internal_set_moveteamnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moveteamnum_ = value;
}
inline void MoveList::set_moveteamnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moveteamnum(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveList.moveteamnum)
}

// -------------------------------------------------------------------

// MoveTeam

// int32 moveteamnum = 1;
inline void MoveTeam::clear_moveteamnum() {
  moveteamnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveTeam::_internal_moveteamnum() const {
  return moveteamnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveTeam::moveteamnum() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveTeam.moveteamnum)
  return _internal_moveteamnum();
}
inline void MoveTeam::_internal_set_moveteamnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moveteamnum_ = value;
}
inline void MoveTeam::set_moveteamnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moveteamnum(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveTeam.moveteamnum)
}

// int32 roomprimeid = 2;
inline void MoveTeam::clear_roomprimeid() {
  roomprimeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveTeam::_internal_roomprimeid() const {
  return roomprimeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveTeam::roomprimeid() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveTeam.roomprimeid)
  return _internal_roomprimeid();
}
inline void MoveTeam::_internal_set_roomprimeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomprimeid_ = value;
}
inline void MoveTeam::set_roomprimeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomprimeid(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveTeam.roomprimeid)
}

// int32 roomlistid = 3;
inline void MoveTeam::clear_roomlistid() {
  roomlistid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveTeam::_internal_roomlistid() const {
  return roomlistid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveTeam::roomlistid() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveTeam.roomlistid)
  return _internal_roomlistid();
}
inline void MoveTeam::_internal_set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomlistid_ = value;
}
inline void MoveTeam::set_roomlistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomlistid(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveTeam.roomlistid)
}

// int32 movetolistid = 4;
inline void MoveTeam::clear_movetolistid() {
  movetolistid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveTeam::_internal_movetolistid() const {
  return movetolistid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveTeam::movetolistid() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveTeam.movetolistid)
  return _internal_movetolistid();
}
inline void MoveTeam::_internal_set_movetolistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  movetolistid_ = value;
}
inline void MoveTeam::set_movetolistid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_movetolistid(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveTeam.movetolistid)
}

// -------------------------------------------------------------------

// PlayerMove

// int32 roomid = 1;
inline void PlayerMove::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerMove::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerMove::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMove.roomid)
  return _internal_roomid();
}
inline void PlayerMove::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void PlayerMove::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerMove.roomid)
}

// int32 primid = 2;
inline void PlayerMove::clear_primid() {
  primid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerMove::_internal_primid() const {
  return primid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerMove::primid() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMove.primid)
  return _internal_primid();
}
inline void PlayerMove::_internal_set_primid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  primid_ = value;
}
inline void PlayerMove::set_primid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_primid(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerMove.primid)
}

// .Protocol.Position pos = 3;
inline bool PlayerMove::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PlayerMove::has_pos() const {
  return _internal_has_pos();
}
inline void PlayerMove::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Protocol::Position& PlayerMove::_internal_pos() const {
  const ::Protocol::Position* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Position&>(
      ::Protocol::_Position_default_instance_);
}
inline const ::Protocol::Position& PlayerMove::pos() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMove.pos)
  return _internal_pos();
}
inline void PlayerMove::unsafe_arena_set_allocated_pos(
    ::Protocol::Position* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerMove.pos)
}
inline ::Protocol::Position* PlayerMove::release_pos() {
  
  ::Protocol::Position* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Position* PlayerMove::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerMove.pos)
  
  ::Protocol::Position* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Protocol::Position* PlayerMove::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Position>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Protocol::Position* PlayerMove::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerMove.pos)
  return _internal_mutable_pos();
}
inline void PlayerMove::set_allocated_pos(::Protocol::Position* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Position>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerMove.pos)
}

// .Protocol.Rotation rot = 4;
inline bool PlayerMove::_internal_has_rot() const {
  return this != internal_default_instance() && rot_ != nullptr;
}
inline bool PlayerMove::has_rot() const {
  return _internal_has_rot();
}
inline void PlayerMove::clear_rot() {
  if (GetArenaForAllocation() == nullptr && rot_ != nullptr) {
    delete rot_;
  }
  rot_ = nullptr;
}
inline const ::Protocol::Rotation& PlayerMove::_internal_rot() const {
  const ::Protocol::Rotation* p = rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Rotation&>(
      ::Protocol::_Rotation_default_instance_);
}
inline const ::Protocol::Rotation& PlayerMove::rot() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMove.rot)
  return _internal_rot();
}
inline void PlayerMove::unsafe_arena_set_allocated_rot(
    ::Protocol::Rotation* rot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rot_);
  }
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerMove.rot)
}
inline ::Protocol::Rotation* PlayerMove::release_rot() {
  
  ::Protocol::Rotation* temp = rot_;
  rot_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Rotation* PlayerMove::unsafe_arena_release_rot() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerMove.rot)
  
  ::Protocol::Rotation* temp = rot_;
  rot_ = nullptr;
  return temp;
}
inline ::Protocol::Rotation* PlayerMove::_internal_mutable_rot() {
  
  if (rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Rotation>(GetArenaForAllocation());
    rot_ = p;
  }
  return rot_;
}
inline ::Protocol::Rotation* PlayerMove::mutable_rot() {
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerMove.rot)
  return _internal_mutable_rot();
}
inline void PlayerMove::set_allocated_rot(::Protocol::Rotation* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rot_;
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Rotation>::GetOwningArena(rot);
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    
  } else {
    
  }
  rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerMove.rot)
}

// .Protocol.Velocity vel = 5;
inline bool PlayerMove::_internal_has_vel() const {
  return this != internal_default_instance() && vel_ != nullptr;
}
inline bool PlayerMove::has_vel() const {
  return _internal_has_vel();
}
inline void PlayerMove::clear_vel() {
  if (GetArenaForAllocation() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
}
inline const ::Protocol::Velocity& PlayerMove::_internal_vel() const {
  const ::Protocol::Velocity* p = vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Velocity&>(
      ::Protocol::_Velocity_default_instance_);
}
inline const ::Protocol::Velocity& PlayerMove::vel() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMove.vel)
  return _internal_vel();
}
inline void PlayerMove::unsafe_arena_set_allocated_vel(
    ::Protocol::Velocity* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  vel_ = vel;
  if (vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerMove.vel)
}
inline ::Protocol::Velocity* PlayerMove::release_vel() {
  
  ::Protocol::Velocity* temp = vel_;
  vel_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Velocity* PlayerMove::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerMove.vel)
  
  ::Protocol::Velocity* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::Protocol::Velocity* PlayerMove::_internal_mutable_vel() {
  
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Velocity>(GetArenaForAllocation());
    vel_ = p;
  }
  return vel_;
}
inline ::Protocol::Velocity* PlayerMove::mutable_vel() {
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerMove.vel)
  return _internal_mutable_vel();
}
inline void PlayerMove::set_allocated_vel(::Protocol::Velocity* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vel_;
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Velocity>::GetOwningArena(vel);
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    
  } else {
    
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerMove.vel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
